<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.Imaging.Office.OpenXml</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder">
            <summary>
            Defines a decoder for DOCX or DOC documents.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder" /> class.
            </summary>
            <param name="stream">The source stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.#ctor(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder" /> class.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="layoutSettings">The document layout settings.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
            <value>
            Always returns <b>"Docx"</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.GetDefaultLayoutSettings">
            <summary>
            Returns the default layout settings of DOCX document.
            </summary>
            <returns>Default layout settings of DOCX document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains DOCX or DOC file.
            </summary>
            <param name="stream">Stream with file data.</param>
            <returns>
            <b>True</b> if stream contains DOCX or DOC file; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.GetDefaultRenderingSettings(System.Int32)">
            <summary>
            Returns the default rendering settings of the specified DOCX page.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>
            Default rendering settings.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.GetDocumentMetadata">
            <summary>
            Returns a document metadata.
            </summary>
            <returns>
            An instance of <see cref="T:Vintasoft.Imaging.Metadata.DocxDocumentMetadata" /> class.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of specified DOCX page.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>
            Metadata of specified DOCX page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.Serialize(System.IO.Stream)">
            <summary>
            Serializes <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder" /> to the specified stream.
            </summary>
            <param name="stream">The stream where the decoder must save the serialized data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes data from provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="stream">The stream that contains the data to deserialize.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.CreateDocument(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Creates the DOCX document.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="layoutSettings">The document layout settings.</param>
            <returns />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.GetPage(System.Int32)">
            <summary>
            Returns the DOCX page.
            </summary>
            <param name="pageIndex">The zero-based page index.</param>
            <returns>
            The DOCX page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.GetDecoderRenderingSettings(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns the rendering settings, which correspond to the DOCX decoder.
            </summary>
            <param name="renderingSettings">The rendering settings.</param>
            <returns>
            Rendering settings, which correspond to the DOCX decoder.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDecoder.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings">
            <summary>
            Contains rendering settings of DOCX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings" /> class.
            </summary>
            <param name="resolution">Resolution, in pixels per inch, for image
            rendering.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.
            </summary>
            <returns>
            Exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings.CopyTo(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="obj">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxRenderingSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <b>true</b> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings">
            <summary>
            Provides layout settings for DOCX document.
            </summary>
            <seealso cref="E:Vintasoft.Imaging.ImageCollection.LayoutSettingsRequest" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.ShowHiddenContent">
            <summary>
            Gets or sets a value indicating whether the hidden content must be shown.
            </summary>
            <value>
            <b>True</b> - hidden content must be shown;
            <b>false</b> - hidden content must not be shown.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings" />.
            </summary>
            <returns>
            Exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.CopyTo(Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="obj">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <b>true</b> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DocxDocumentLayoutSettings.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings">
            <summary>
            Provides layout settings for XLSX document.
            </summary>
            <seealso cref="E:Vintasoft.Imaging.ImageCollection.LayoutSettingsRequest" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.PageLayoutSettingsType">
            <summary>
            Gets or sets the type of page layout settings.
            </summary>
            <value>
            Default value is 
            <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType" />.UsePageMargin | 
            <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType" />.UsePageScale | 
            <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType" />.UsePrintArea.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.ShowHiddenSheets">
            <summary>
            Gets or sets a value indicating whether the hidden worksheets must be shown.
            </summary>
            <value>
            <b>True</b> - hidden worksheets must be shown;
            <b>false</b> - hidden worksheets must not be shown.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.ShowHiddenGraphics">
            <summary>
            Gets or sets a value indicating whether the hidden graphics must be shown.
            </summary>
            <value>
            <b>True</b> - hidden graphics must be shown;
            <b>false</b> - hidden graphics must not be shown.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings" />.
            </summary>
            <returns>
            Exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.CopyTo(Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="obj">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <b>true</b> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDocumentLayoutSettings.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType">
            <summary>
            Specifies available types, which define how an XLSX page must be laid out.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.Undefined">
            <summary>
            The undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UseWorksheetWidth">
            <summary>
            Page width will be equal to the worksheet width.
            Page height will be retrieved from <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings" /> or from print settings of worksheet.
            </summary>
            <remarks>
            Usage of this flag cancels flag <see cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageScale" />.
            </remarks>
            <seealso cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageScale" />
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UseWorksheetHeight">
            <summary>
            Page height will be equal to the worksheet height.
            Page width will be retrieved from <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings" /> or from print settings of worksheet.
            </summary>
            <remarks>
            Usage of this flag cancels flag <see cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageScale" />.
            </remarks>
            <seealso cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageScale" />
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UseWorksheetSize">
            <summary>
            Page width will be equal to the worksheet width.
            Page height will be equal to the worksheet height.
            </summary>
            <remarks>
            Usage of this flag cancels flag <see cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageScale" />.
            </remarks>
            <seealso cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageScale" />
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePrintArea">
            <summary>
            Use the worksheet print area.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageMargin">
            <summary>
            Use the worksheet margin.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UsePageScale">
            <summary>
            Use the worksheet scale.
            </summary>
            <seealso cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UseWorksheetWidth" />
            <seealso cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UseWorksheetHeight" />
            <seealso cref="F:Vintasoft.Imaging.Codecs.Decoders.XlsxPageLayoutSettingsType.UseWorksheetSize" />
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1">
            <summary>
            Provides the <b>abstract</b> base class for OpenXml decoders.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.#ctor(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1" /> class.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="layoutSettings">The document layout settings.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.IsVectorDecoder">
            <summary>
            Gets a value indicating whether the decoder is a vector decoder.
            </summary>
            <value>
            Always return <b>True</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.Document">
            <summary>
            Gets the OpenXml document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.PageCount">
            <summary>
            Gets the number of pages in the source document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified OpenXml page.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">The decoding settings that should be used for decoding of page image.</param>
            <param name="renderingSettings">Rendering settings used for rendering the image of page.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>
            Rendered image associated with the specified OpenXml page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about rendered image of OpenXml page without loading the OpenXml page data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for getting info about the image of page.</param>
            <param name="decodingSettings">Decoding settings used for getting info about the image of page.</param>
            <returns>
            Information about the rendered image of OpenXml page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.GetImage(System.Int32,System.Drawing.RectangleF,System.Single,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled rectangle of rendered image of OpenXml page.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="rect">Rectangle on source image.</param>
            <param name="scale">Scale factor.</param>
            <param name="decodingSettings">Decoding settings.</param>
            <param name="renderingSettings">Rendering settings.</param>
            <param name="imageRenderingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>
            Scaled rectangle of rendered image of OpenXml page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.CreateDocument(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Creates the OpenXml document.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="layoutSettings">The document layout settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.GetDecoderRenderingSettings(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns the rendering settings, which are correspond to the OpenXml decoder.
            </summary>
            <param name="renderingSettings">The rendering settings.</param>
            <returns>Rendering settings, which are correspond to the OpenXml decoder.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.OpenXmlDecoder`1.GetPage(System.Int32)">
            <summary>
            Returns the OpenXml page.
            </summary>
            <param name="pageIndex">The zero-based page index.</param>
            <returns>
            The OpenXml page.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder">
            <summary>
            Defines a decoder for XLSX or XLS documents.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder" /> class.
            </summary>
            <param name="stream">The source stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.#ctor(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder" /> class.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="layoutSettings">The document layout settings.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
            <value>
            Always returns <b>"Xlsx"</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.GetDefaultLayoutSettings">
            <summary>
            Returns the default layout settings of XLSX document.
            </summary>
            <returns>Default layout settings of XLSX document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains XLSX or XLS file.
            </summary>
            <param name="stream">Stream with file data.</param>
            <returns>
            <b>True</b> if stream contains XLSX or XLS file; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.GetDefaultRenderingSettings(System.Int32)">
            <summary>
            Returns the default rendering settings of XLSX page.
            </summary>
            <param name="pageIndex">The zero-based index of XLSX page.</param>
            <returns>
            Default rendering settings.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.GetDocumentMetadata">
            <summary>
            Returns a metadata of XLSX document.
            </summary>
            <returns>
            An instance of <see cref="T:Vintasoft.Imaging.Metadata.XlsxDocumentMetadata" /> class.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of XLSX page.
            </summary>
            <param name="pageIndex">The zero-based index of XLSX page.</param>
            <returns>
            Metadata of XLSX page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.Serialize(System.IO.Stream)">
            <summary>
            Serializes <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder" /> to the specified stream.
            </summary>
            <param name="stream">The stream where the decoder must save the serialized data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes data from provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="stream">The stream that contains the data to deserialize.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.CreateDocument(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Creates the XLSX document.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="layoutSettings">The document layout settings.</param>
            <returns />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.GetPage(System.Int32)">
            <summary>
            Returns the XLSX page.
            </summary>
            <param name="pageIndex">The zero-based index of XLSX page.</param>
            <returns>
            The XLSX page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.GetDecoderRenderingSettings(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns the rendering settings, which are correspond to the XLSX decoder.
            </summary>
            <param name="renderingSettings">The rendering settings.</param>
            <returns>
            Rendering settings, which are correspond to the XLSX decoder.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxDecoder.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.XlsxRenderingSettings">
            <summary>
            Contains rendering settings of XLSX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxRenderingSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxRenderingSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.XlsxRenderingSettings.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxRenderingSettings" />.
            </summary>
            <returns>
            Exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.XlsxRenderingSettings" />.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings">
            <summary>
            Contains rendering settings of markup page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings" /> class.
            </summary>
            <param name="resolution">Resolution, in pixels per inch, for image
            rendering.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.TextRenderingHint">
            <summary>
            Gets or sets the text rendering hint that uses raster drawing engine.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.ShowNonPrintableCharacters">
            <summary>
            Gets or sets a value indicating whether the non-printable characters are visible.
            </summary>
            <value>
            <b>True</b> - non-printable characters are visible;
            <b>false</b> - non-printable characters are not visible.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.ShowInvisibleTableBorders">
            <summary>
            Gets or sets the color of the invisible table borders.
            </summary>
            <value>
            The color of the invisible table borders.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.InvisibleTableBordersColor" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.InvisibleTableBordersColor">
            <summary>
            Gets or sets the color of the invisible table borders.
            </summary>
            <value>
            The color of the invisible table borders.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.ShowInvisibleTableBorders" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.DefaultBackroundColor">
            <summary>
            Gets or sets the default color of the page background.
            </summary>
            <value>
            Default value is <see cref="P:System.Drawing.Color.White" />.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.
            </summary>
            <returns>
            Exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.CopyTo(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="obj">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.MarkupRenderingSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <b>true</b> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.DocxEncoderException">
            <summary>
            Represents error that occurs during saving DOCX file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder">
            <summary>
            Defines an encoder for DOCX pages.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder.AnnotationsFormat" />.None.
            </value>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown when property value is changed.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image collection to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection
            should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.DocxEncoder.SaveImageWithMetadataToStream(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves single image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="stream">Stream, where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image data is changed (image metadata may be changed also) or
            image must be saved to new source.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoderException">
            <summary>
            Represents error that occurs during saving XLSX file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder">
            <summary>
            Defines an encoder for XLSX pages.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder.AnnotationsFormat" />.None.
            </value>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown when property value is changed.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image collection to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection
            should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.XlsxEncoder.SaveImageWithMetadataToStream(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves single image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="stream">Stream, where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image data is changed (image metadata may be changed also) or
            image must be saved to new source.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.DocxDocumentMetadata">
            <summary>
            Represents a root node of tree that stores metadata of DOCX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.DocxDocumentMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.DocxDocumentMetadata" /> class.
            </summary>
            <param name="document">The DOCX document.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>document</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.DocxDocumentMetadata.Document">
            <summary>
            Gets the document that associated with this metadata node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.DocxPageMetadata">
            <summary>
            Represents a root tree node that stores metadata of DOCX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.DocxPageMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.DocxPageMetadata" /> class.
            </summary>
            <param name="document">The DOCX document.</param>
            <param name="pageIndex">The page index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.DocxPageMetadata.ContentActions">
            <summary>
            Gets the content actions of DOCX page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata">
            <summary>
            Represents a root tree node that stores hyperlink metadata of <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage" /> page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.DestPageIndex">
            <summary>
            Gets the index of the destination page, which must be set in an image viewer.
            </summary>
            <value>
            The value of this property is set in the class constructor.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.DestRect">
            <summary>
            Gets the rect on destination page, in image space, measured in device-independent pixels (1/96th inch).
            </summary>
            <value>
            The value of this property is set in the class constructor.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.Region">
            <summary>
            Gets the region of the conent metadata, in image space, measured in device-independent pixels (1/96th inch).
            </summary>
            <value>
            The value of this property is set in the class constructor.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.SizeMode">
            <summary>
            Gets the size mode that must be set in an image viewer.
            </summary>
            <value>
            Always return <see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.Zoom.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.Zoom">
            <summary>
            Gets the zoom that must be set in an image viewer.
            </summary>
            <value>
            Always return 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.ZoomToDestRect">
            <summary>
            Gets or sets a value indicating whether viewer must zooms to <see cref="P:Vintasoft.Imaging.Metadata.GotoActionMetadata.DestRect" />.
            </summary>
            <value>
            <b>True</b> - viewer must be scrolled and zoomed to the <see cref="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.DestRect" />, <see cref="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.Zoom" /> property must be ignored.<br />
            <b>false</b> - viewer must be scrolled to the <see cref="P:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.DestRect" />.<br />
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlGotoActionMetadata.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata">
            <summary>
            Represents a root tree node that stores hyperlink metadata of <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage" /> page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>
            The value of this property is set in the class constructor.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata.Region">
            <summary>
            Gets the region of the conent metadata, in image space, measured in device-independent pixels (1/96th inch).
            </summary>
            <value>
            The value of this property is set in the class constructor.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlUriActionMetadata.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.DocxPageTextRegionMetadata">
            <summary>
            Represents a metadata node that stores text region of DOCX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.DocxPageTextRegionMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.DocxPageTextRegionMetadata" /> class.
            </summary>
            <param name="document">Open XML document.</param>
            <param name="pageIndex">The page index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.DocxPageTextRegionMetadata.GetTextRegion">
            <summary>
            Returns the text region of DOCX page, in DOCX page space (TWIP - 1/1440 inch).
            </summary>
            <returns>The text region of DOCX page, in DOCX page space (TWIP - 1/1440 inch).</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.OpenXmlDocumentMetadata">
            <summary>
            Represents a root node of tree that stores metadata of <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument" /> document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlDocumentMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.DocxDocumentMetadata" /> class.
            </summary>
            <param name="document">The OpenXml document.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>document</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlDocumentMetadata.#ctor(System.String,Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.DocxDocumentMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
            <param name="document">The OpenXml document.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>document</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlDocumentMetadata.DocumentInformation">
            <summary>
            Gets information (author, modification date, etc)
            about this DOCX document.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata">
            <summary>
            Represents a root tree node that stores metadata of <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage" /> page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.OpenXmlPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.XlsxPageMetadata" /> class.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.#ctor(System.String,Vintasoft.Imaging.Office.OpenXml.OpenXmlPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.XlsxPageMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
            <param name="page">The page.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.ImageWidth">
            <summary>
            Gets the page image width, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.ImageHeight">
            <summary>
            Gets the page image height, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of page image returned by decoder.
            </summary>
            <value>
            Always returns 24.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.Resolution">
            <summary>
            Gets or sets the page image resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.PageMetadata.HasResolution" />
            returns <b>true</b>; otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.PageMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.ContentActions">
            <summary>
            Gets the content actions of OpenXml page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlPageMetadata.OnChildrenInitialized">
            <summary>
            Occurs when <see cref="P:Vintasoft.Imaging.Metadata.MetadataNode.Children" /> property is initialized.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.OpenXmlPageTextRegionMetadata">
            <summary>
            Represents a metadata node that stores text region of <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage" /> page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlPageTextRegionMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.XlsxPageTextRegionMetadata" /> class.
            </summary>
            <param name="document">Open XML document.</param>
            <param name="pageIndex">The page index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageTextRegionMetadata.IsTextRegionCached">
            <summary>
            Gets a value indicating whether text region is cached.
            </summary>
            <value>
            <b>True</b> if text region is cached; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageTextRegionMetadata.AddNonPrintableCharacters">
            <summary>
            Gets or sets a value indicating whether text region must contain non-printable characters.
            </summary>
            <value>
            <b>True</b> - text region must contain non-printable characters;<br />
            <b>false</b> - text region must not contain non-printable characters.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.OpenXmlPageTextRegionMetadata.UsePageClipBounds">
            <summary>
            Gets or sets a value indicating whether text extractor uses page clip bounds.
            </summary>
            <value>
            <b>True</b> - text extractor uses page clip bounds;<br />
            <b>false</b> - text extractor uses infinite clip bounds.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.OpenXmlPageTextRegionMetadata.GetTextRegion">
            <summary>
            Returns the text region of document page.
            </summary>
            <returns>The text region of document page.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.XlsxPageTextRegionMetadata">
            <summary>
            Represents metadata node that stores text region of XLSX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.XlsxPageTextRegionMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.XlsxPageTextRegionMetadata" /> class.
            </summary>
            <param name="document">Open XML document.</param>
            <param name="pageIndex">The page index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.XlsxPageTextRegionMetadata.GetTextRegion">
            <summary>
            Returns the text region of XLSX page, in XLSX page space (POINT - 1/72 inch).
            </summary>
            <returns>The text region of XLSX page, in XLSX page space (POINT - 1/72 inch).</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.XlsxDocumentMetadata">
            <summary>
            Represents a root node of tree that stores metadata of XLSX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.XlsxDocumentMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.XlsxDocumentMetadata" /> class.
            </summary>
            <param name="document">The XLSX document.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>document</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.XlsxDocumentMetadata.Document">
            <summary>
            Gets the XLSX document that is associated with this metadata node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.XlsxPageMetadata">
            <summary>
            Represents a root tree node that stores metadata of XLSX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.XlsxPageMetadata.#ctor(Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.XlsxPageMetadata" /> class.
            </summary>
            <param name="document">The XLSX document.</param>
            <param name="pageIndex">The page index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.XlsxPageMetadata.ContentActions">
            <summary>
            Gets the content actions of XLSX page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocumentException">
            <summary>
            Represents error that occurs during manipulation with DOCX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocumentException" />
            class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocumentException" />
            class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no
            inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument">
            <summary>
            Represents a DOCX document.
            </summary>
            <example>Here is an example that shows how to display information about DOCX document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Shows information about DOCX document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            Public Shared Sub ShowDocxDocumentInfo(filename As String)
                ' open DOCX document
                Using docxDocument As New Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read)
                    ' print information about DOCX document
            
                    System.Console.WriteLine(String.Format("DOCX document ""{0}"" information:", filename))
                    System.Console.WriteLine(String.Format(" - Page count: {0}", docxDocument.Pages.Count))
                    System.Console.WriteLine(String.Format(" - Category: {0}", docxDocument.DocumentInformation.Category))
                    System.Console.WriteLine(String.Format(" - ContentStatus: {0}", docxDocument.DocumentInformation.ContentStatus))
                    System.Console.WriteLine(String.Format(" - ContentType: {0}", docxDocument.DocumentInformation.ContentType))
                    System.Console.WriteLine(String.Format(" - Created: {0}", docxDocument.DocumentInformation.Created))
                    System.Console.WriteLine(String.Format(" - Creator: {0}", docxDocument.DocumentInformation.Creator))
                    System.Console.WriteLine(String.Format(" - Description: {0}", docxDocument.DocumentInformation.Description))
                    System.Console.WriteLine(String.Format(" - Identifier: {0}", docxDocument.DocumentInformation.Identifier))
                    System.Console.WriteLine(String.Format(" - Keywords: {0}", docxDocument.DocumentInformation.Keywords))
                    System.Console.WriteLine(String.Format(" - Language: {0}", docxDocument.DocumentInformation.Language))
                    System.Console.WriteLine(String.Format(" - LastModifiedBy: {0}", docxDocument.DocumentInformation.LastModifiedBy))
                    System.Console.WriteLine(String.Format(" - LastPrinted: {0}", docxDocument.DocumentInformation.LastPrinted))
                    System.Console.WriteLine(String.Format(" - Modified: {0}", docxDocument.DocumentInformation.Modified))
                    System.Console.WriteLine(String.Format(" - Revision: {0}", docxDocument.DocumentInformation.Revision))
                    System.Console.WriteLine(String.Format(" - Subject: {0}", docxDocument.DocumentInformation.Subject))
                    System.Console.WriteLine(String.Format(" - Title: {0}", docxDocument.DocumentInformation.Title))
                    System.Console.WriteLine(String.Format(" - Version: {0}", docxDocument.DocumentInformation.Version))
                End Using
            
                System.Console.WriteLine("Press any key...")
                System.Console.ReadKey()
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Shows information about DOCX document.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            public static void ShowDocxDocumentInfo(string filename)
            {
                // open DOCX document
                using (Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument docxDocument =
                    new Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read))
                {
                    // print information about DOCX document
            
                    System.Console.WriteLine(string.Format("DOCX document \"{0}\" information:", filename));
                    System.Console.WriteLine(string.Format(" - Page count: {0}", docxDocument.Pages.Count));
                    System.Console.WriteLine(string.Format(" - Category: {0}", docxDocument.DocumentInformation.Category));
                    System.Console.WriteLine(string.Format(" - ContentStatus: {0}", docxDocument.DocumentInformation.ContentStatus));
                    System.Console.WriteLine(string.Format(" - ContentType: {0}", docxDocument.DocumentInformation.ContentType));
                    System.Console.WriteLine(string.Format(" - Created: {0}", docxDocument.DocumentInformation.Created));
                    System.Console.WriteLine(string.Format(" - Creator: {0}", docxDocument.DocumentInformation.Creator));
                    System.Console.WriteLine(string.Format(" - Description: {0}", docxDocument.DocumentInformation.Description));
                    System.Console.WriteLine(string.Format(" - Identifier: {0}", docxDocument.DocumentInformation.Identifier));
                    System.Console.WriteLine(string.Format(" - Keywords: {0}", docxDocument.DocumentInformation.Keywords));
                    System.Console.WriteLine(string.Format(" - Language: {0}", docxDocument.DocumentInformation.Language));
                    System.Console.WriteLine(string.Format(" - LastModifiedBy: {0}", docxDocument.DocumentInformation.LastModifiedBy));
                    System.Console.WriteLine(string.Format(" - LastPrinted: {0}", docxDocument.DocumentInformation.LastPrinted));
                    System.Console.WriteLine(string.Format(" - Modified: {0}", docxDocument.DocumentInformation.Modified));
                    System.Console.WriteLine(string.Format(" - Revision: {0}", docxDocument.DocumentInformation.Revision));
                    System.Console.WriteLine(string.Format(" - Subject: {0}", docxDocument.DocumentInformation.Subject));
                    System.Console.WriteLine(string.Format(" - Title: {0}", docxDocument.DocumentInformation.Title));
                    System.Console.WriteLine(string.Format(" - Version: {0}", docxDocument.DocumentInformation.Version));
                }
            
                System.Console.WriteLine("Press any key...");
                System.Console.ReadKey();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument" /> class.
            </summary>
            <param name="stream">A stream, which contains the DOCX file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.#ctor(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument" /> class.
            </summary>
            <param name="stream">A stream, which contains the DOCX file.</param>
            <param name="layoutSettings">The document layout settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument" /> class.
            </summary>
            <param name="filename">The name of the DOCX file.</param>
            <param name="mode">A FileMode constant that determines how to open or create the DOCX file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>mode</i> or <i>access</i> is not supported.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument" /> class.
            </summary>
            <param name="filename">The name of the DOCX file.</param>
            <param name="mode">A FileMode constant that determines how to open or create the DOCX file.</param>
            <param name="access">A FileAccess constant that determines how the image file can be accessed.</param>
            <param name="layoutSettings">The document layout settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>mode</i> or <i>access</i> is not supported.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.Pages">
            <summary>
            Gets the page collection of DOCX file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.DocumentInformation">
            <summary>
            Gets information (author, modification date, etc)
            about this DOCX document.
            </summary>
            <example>Here is an example that shows how to display information about DOCX document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Shows information about DOCX document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            Public Shared Sub ShowDocxDocumentInfo(filename As String)
                ' open DOCX document
                Using docxDocument As New Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read)
                    ' print information about DOCX document
            
                    System.Console.WriteLine(String.Format("DOCX document ""{0}"" information:", filename))
                    System.Console.WriteLine(String.Format(" - Page count: {0}", docxDocument.Pages.Count))
                    System.Console.WriteLine(String.Format(" - Category: {0}", docxDocument.DocumentInformation.Category))
                    System.Console.WriteLine(String.Format(" - ContentStatus: {0}", docxDocument.DocumentInformation.ContentStatus))
                    System.Console.WriteLine(String.Format(" - ContentType: {0}", docxDocument.DocumentInformation.ContentType))
                    System.Console.WriteLine(String.Format(" - Created: {0}", docxDocument.DocumentInformation.Created))
                    System.Console.WriteLine(String.Format(" - Creator: {0}", docxDocument.DocumentInformation.Creator))
                    System.Console.WriteLine(String.Format(" - Description: {0}", docxDocument.DocumentInformation.Description))
                    System.Console.WriteLine(String.Format(" - Identifier: {0}", docxDocument.DocumentInformation.Identifier))
                    System.Console.WriteLine(String.Format(" - Keywords: {0}", docxDocument.DocumentInformation.Keywords))
                    System.Console.WriteLine(String.Format(" - Language: {0}", docxDocument.DocumentInformation.Language))
                    System.Console.WriteLine(String.Format(" - LastModifiedBy: {0}", docxDocument.DocumentInformation.LastModifiedBy))
                    System.Console.WriteLine(String.Format(" - LastPrinted: {0}", docxDocument.DocumentInformation.LastPrinted))
                    System.Console.WriteLine(String.Format(" - Modified: {0}", docxDocument.DocumentInformation.Modified))
                    System.Console.WriteLine(String.Format(" - Revision: {0}", docxDocument.DocumentInformation.Revision))
                    System.Console.WriteLine(String.Format(" - Subject: {0}", docxDocument.DocumentInformation.Subject))
                    System.Console.WriteLine(String.Format(" - Title: {0}", docxDocument.DocumentInformation.Title))
                    System.Console.WriteLine(String.Format(" - Version: {0}", docxDocument.DocumentInformation.Version))
                End Using
            
                System.Console.WriteLine("Press any key...")
                System.Console.ReadKey()
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Shows information about DOCX document.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            public static void ShowDocxDocumentInfo(string filename)
            {
                // open DOCX document
                using (Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument docxDocument =
                    new Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read))
                {
                    // print information about DOCX document
            
                    System.Console.WriteLine(string.Format("DOCX document \"{0}\" information:", filename));
                    System.Console.WriteLine(string.Format(" - Page count: {0}", docxDocument.Pages.Count));
                    System.Console.WriteLine(string.Format(" - Category: {0}", docxDocument.DocumentInformation.Category));
                    System.Console.WriteLine(string.Format(" - ContentStatus: {0}", docxDocument.DocumentInformation.ContentStatus));
                    System.Console.WriteLine(string.Format(" - ContentType: {0}", docxDocument.DocumentInformation.ContentType));
                    System.Console.WriteLine(string.Format(" - Created: {0}", docxDocument.DocumentInformation.Created));
                    System.Console.WriteLine(string.Format(" - Creator: {0}", docxDocument.DocumentInformation.Creator));
                    System.Console.WriteLine(string.Format(" - Description: {0}", docxDocument.DocumentInformation.Description));
                    System.Console.WriteLine(string.Format(" - Identifier: {0}", docxDocument.DocumentInformation.Identifier));
                    System.Console.WriteLine(string.Format(" - Keywords: {0}", docxDocument.DocumentInformation.Keywords));
                    System.Console.WriteLine(string.Format(" - Language: {0}", docxDocument.DocumentInformation.Language));
                    System.Console.WriteLine(string.Format(" - LastModifiedBy: {0}", docxDocument.DocumentInformation.LastModifiedBy));
                    System.Console.WriteLine(string.Format(" - LastPrinted: {0}", docxDocument.DocumentInformation.LastPrinted));
                    System.Console.WriteLine(string.Format(" - Modified: {0}", docxDocument.DocumentInformation.Modified));
                    System.Console.WriteLine(string.Format(" - Revision: {0}", docxDocument.DocumentInformation.Revision));
                    System.Console.WriteLine(string.Format(" - Subject: {0}", docxDocument.DocumentInformation.Subject));
                    System.Console.WriteLine(string.Format(" - Title: {0}", docxDocument.DocumentInformation.Title));
                    System.Console.WriteLine(string.Format(" - Version: {0}", docxDocument.DocumentInformation.Version));
                }
            
                System.Console.WriteLine("Press any key...");
                System.Console.ReadKey();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.SetIsEditable">
            <summary>
            Sets <see cref="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.IsEditable" /> to <b>true</b>.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPage">
            <summary>
            Represents a DOCX page.
            </summary>
            <example>Here is an example that shows how to render all pages of DOCX document and save rendered images to PNG files:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Renders all pages of DOCX document and saves rendered images to PNG files.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            Public Shared Sub RenderAndSaveDocxPages(filename As String)
                ' open DOCX document
                Using docxDocument As New Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read)
                    ' for each DOCX page
                    For i As Integer = 0 To docxDocument.Pages.Count - 1
                        ' render DOCX page
                        Using renderedPage As Vintasoft.Imaging.VintasoftImage = docxDocument.Pages(i).Render()
                            ' save rendered image to a PNG file
                            renderedPage.Save(String.Format("page{0}.png", i))
                        End Using
                    Next
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Renders all pages of DOCX document and saves rendered images to PNG files.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            public static void RenderAndSaveDocxPages(string filename)
            {
                // open DOCX document
                using (Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument docxDocument =
                    new Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read))
                {
                    // for each DOCX page
                    for (int i = 0; i &lt; docxDocument.Pages.Count; i++)
                    {
                        // render DOCX page
                        using (Vintasoft.Imaging.VintasoftImage renderedPage = docxDocument.Pages[i].Render())
                        {
                            // save rendered image to a PNG file
                            renderedPage.Save(string.Format("page{0}.png", i));
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPage" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPage" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPageCollection">
            <summary>
            Represents a collection of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPage" /> objects.
            </summary>
            <example>Here is an example that shows how to render all pages of DOCX document and save rendered images to PNG files:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Renders all pages of DOCX document and saves rendered images to PNG files.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            Public Shared Sub RenderAndSaveDocxPages(filename As String)
                ' open DOCX document
                Using docxDocument As New Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read)
                    ' for each DOCX page
                    For i As Integer = 0 To docxDocument.Pages.Count - 1
                        ' render DOCX page
                        Using renderedPage As Vintasoft.Imaging.VintasoftImage = docxDocument.Pages(i).Render()
                            ' save rendered image to a PNG file
                            renderedPage.Save(String.Format("page{0}.png", i))
                        End Using
                    Next
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Renders all pages of DOCX document and saves rendered images to PNG files.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;A name of DOCX file.&lt;/param&gt;
            public static void RenderAndSaveDocxPages(string filename)
            {
                // open DOCX document
                using (Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument docxDocument =
                    new Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read))
                {
                    // for each DOCX page
                    for (int i = 0; i &lt; docxDocument.Pages.Count; i++)
                    {
                        // render DOCX page
                        using (Vintasoft.Imaging.VintasoftImage renderedPage = docxDocument.Pages[i].Render())
                        {
                            // save rendered image to a PNG file
                            renderedPage.Save(string.Format("page{0}.png", i));
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPageCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPageCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPageCollection" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle">
            <summary>
            Defines available marker styles for chart.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Auto">
            <summary>
             Auto.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Circle">
            <summary>
             Circle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Dash">
            <summary>
             Dash.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Diamond">
            <summary>
             Diamond.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Dot">
            <summary>
             Dot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.None">
            <summary>
             None.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Picture">
            <summary>
             Picture.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Plus">
            <summary>
             Plus.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Square">
            <summary>
             Square.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Star">
            <summary>
             Star.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Triangle">
            <summary>
             Triangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerStyle.Cross">
            <summary>
             Cross.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarker">
            <summary>
            Provides access to the chart marker properties.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarker.Size">
            <summary>
            Gets or sets the size of marker.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarker.Style">
            <summary>
            Gets or sets the marker style.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarker.ShapeProperties">
            <summary>
            Gets the shape properties of marker.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarker.SetFillColor(System.Nullable{System.Drawing.Color})">
            <summary>
            Sets the fill color of this element.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataPoint">
            <summary>
            Provides access to the chart data point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataPoint.ValueIndex">
            <summary>
            Gets or sets the index of the data point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataPoint.ShapeProperties">
            <summary>
            Gets the shape properties of this data point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataPoint.Marker">
            <summary>
            Gets the marker of data point.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataPoint.SetFillColor(System.Nullable{System.Drawing.Color})">
            <summary>
            Sets the fill color of this element.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerShapeProperties">
            <summary>
            Provides access to the shape properties of chart data series.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerShapeProperties.FillColor">
            <summary>
            Gets or sets the fill color of the shape.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartMarkerShapeProperties.OutlineColor">
            <summary>
            Gets or sets the outline color of the shape.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartShapeProperties">
            <summary>
            Provides access to the chart shape properties.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartShapeProperties.FillColor">
            <summary>
            Gets or sets the fill color of the shape.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartShapeProperties.OutlineColor">
            <summary>
            Gets or sets the outline color of the shape.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartShapeProperties.SetFillColor(System.Nullable{System.Drawing.Color})">
            <summary>
            Sets the fill color of this element.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartShapeProperties.Remove">
            <summary>
            This method is unsupported.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries">
            <summary>
            Represents series of chart data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.HasMarkers">
            <summary>
            Gets a value indicating whether this chart series has markers.
            </summary>
            <value>
            <b>True</b> if this chart series has markers; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.SeriesText">
            <summary>
            Gets or sets the series text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.CategoryAxis">
            <summary>
            Gets or sets the category axis.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.Values">
            <summary>
            Gets or sets the values of series.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.Order">
            <summary>
            Gets or sets the order of the series.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if <b>value</b> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.ShapeProperties">
            <summary>
            Gets the shape properties of this series.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.Marker">
            <summary>
            Gets the marker of data series.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.GetDataPoints">
            <summary>
            Returns all data points of this data series.
            </summary>
            <returns>All data points of this data series.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.GetDataPoint(System.Int32)">
            <summary>
            Returns the data point at specified index of value.
            </summary>
            <returns>The data point if data point is found; otherwise, <b>null</b>.</returns>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.GetDataPoints" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataPoint.ValueIndex" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.SetFillColor(System.Nullable{System.Drawing.Color})">
            <summary>
            Sets the fill and stroke color of this series.
            </summary>
            <param name="color">The color.</param>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.ShapeProperties" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.Marker" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartDataSeries.ToString">
            <summary>
            Returns a string that represents type of this object.
            </summary>
            <returns>
            A string that represents type of this object.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData">
            <summary>
            Provides access to the chart data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.IsChanged">
            <summary>
            Gets a value indicating whether this chart data is changed.
            </summary>
            <value>
            <b>True</b> if this chart data is changed; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.Remove">
            <summary>
            This method is unsupported.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.SetFromDataTable(System.Data.DataTable)">
            <summary>
            Sets chart data from data table.
            </summary>
            <param name="table">The data table.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.GetAsDataTable">
            <summary>
            Returns chart data as a data table.
            </summary>
            <returns>The new data table.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.GetData(System.String[]@,System.Object[]@,System.Nullable{System.Double}[0:,0:]@)">
            <summary>
            Returns the series, categories and data values.
            </summary>
            <param name="series">The series.</param>
            <param name="categories">The categories.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.SetData(System.String[],System.Object[],System.Nullable{System.Double}[0:,0:])">
            <summary>
            Sets the series, categories and data values.
            </summary>
            <param name="series">The series.</param>
            <param name="categories">The categories.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.SetData(System.Object[],System.Nullable{System.Double}[0:,0:])">
            <summary>
            Sets the categories and data values.
            </summary>
            <param name="categories">The categories.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.SetData(System.Nullable{System.Double}[0:,0:])">
            <summary>
            Sets the chart data values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.GetSeries">
            <summary>
            Returns all series of this chart data.
            </summary>
            <returns>An array of series of chart data.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.GetSeries(System.Int32)">
            <summary>
            Returns the series at specified index.
            </summary>
            <returns>The series of chart data.</returns>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.GetSeries" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChartData.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart">
            <summary>
            Represents a chart of Open XML document.
            </summary>
            <example>Here is an example that shows how to create DOCX file with chart
            (example uses template document <a href="content/Docx_Templates/Chart.docx">Chart.docx</a>):
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates the DOCX document with chart.
            ''' &lt;/summary&gt;
            ''' &lt;param name="resultFilePath"&gt;The result file path.&lt;/param&gt;
            Public Shared Sub CreateDocxWithChart(resultFilePath As String)
                ' path to a template DOCX document with chart
                Dim templateDocDocumentPath As String = "Chart.docx"
            
                ' create DOCX document editor on template document with chart
                Using docxDocumentEditor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateDocDocumentPath)
                    ' get chart
                    Dim chart As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart = docxDocumentEditor.Charts(0)
            
            
                    ' change chart title
            
                    ' find title
                    chart.Title = "Chart Title Example. " &amp; System.DateTime.Now.ToShortDateString()
            
            
                    ' change chart data
            
                    ' create the chart data
                    Dim chartData As System.Nullable(Of Double)(,) = New System.Nullable(Of Double)(,) {{55, 32, 23}, {84, 48, 33}, {72, 53, 86}, {34, 82, 11}}
                    ' change the chart data
                    chart.ChartData.SetData(chartData)
            
            
                    ' save changes
                    docxDocumentEditor.Save(resultFilePath)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates the DOCX document with chart.
            /// &lt;/summary&gt;
            /// &lt;param name="resultFilePath"&gt;The result file path.&lt;/param&gt;
            public static void CreateDocxWithChart(string resultFilePath)
            {
                // path to a template DOCX document with chart
                string templateDocDocumentPath = "Chart.docx";
            
                // create DOCX document editor on template document with chart
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor docxDocumentEditor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateDocDocumentPath))
                {
                    // get chart
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart chart = docxDocumentEditor.Charts[0];
            
            
                    // change chart title
            
                    // find title
                    chart.Title = "Chart Title Example. " + System.DateTime.Now.ToShortDateString();
            
            
                    // change chart data
            
                    // create the chart data
                    double?[,] chartData = new double?[,] {
                         { 55, 32, 23 },
                         { 84, 48, 33 },
                         { 72, 53, 86 },
                         { 34, 82, 11 } };
                    // change the chart data
                    chart.ChartData.SetData(chartData);
            
            
                    // save changes
                    docxDocumentEditor.Save(resultFilePath);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart.Title">
            <summary>
            Gets or sets the title of chart.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart.Properties">
            <summary>
            Gets the properties of chart.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart.ChartData">
            <summary>
            Gets the chart data.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextBreakInfo">
            <summary>
            Represents an information about text break of an Open XML document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextBreakInfo.#ctor(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextBreakInfo" /> class.
            </summary>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextBreakInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextBreakInfo" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo">
            <summary>
            Represents the information about paragraph of an Open XML document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo.#ctor(System.Collections.Generic.ICollection{Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo},Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo" /> class.
            </summary>
            <param name="childElements">The child elements.</param>
            <param name="paragraphProperties">The paragraph properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo.#ctor(System.Collections.Generic.ICollection{Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo" /> class.
            </summary>
            <param name="childElements">The child elements.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo.#ctor(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo" /> class.
            </summary>
            <param name="childElements">The child elements.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo.ParagraphProperties">
            <summary>
            Gets the paragraph properties.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphInfo.ToString">
            <summary>
            Converts to a string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumberingDefinitions">
            <summary>
            Provides the numbering definitions of DOCX document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumberingDefinitions.Items">
            <summary>
            Gets the collection that contains numberings of DOCX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumberingDefinitions.Import(Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor,Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering)">
            <summary>
            Imports the specified numbering item from <paramref name="editor" />.
            </summary>
            <param name="editor">The editor.</param>
            <param name="numbering">The numbering.</param>
            <returns>The import item.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumberingDefinitions.CreateCopy(Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering)">
            <summary>
            Creates copy of specified numbering.
            </summary>
            <param name="numbering">The numbering.</param>
            <returns>A copy of specified numbering.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering">
            <summary>
            Provides the numbering properties of DOCX document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering.Id">
            <summary>
            Gets the numbering identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering.Name">
            <summary>
            Gets the numbering name.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering.ToString">
            <summary>
            Converts to a string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentNumbering.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo">
            <summary>
            Represents an information about text of an Open XML document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo.#ctor(Vintasoft.Imaging.Drawing.DrawingString,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo.#ctor(Vintasoft.Imaging.Drawing.DrawingString)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo" /> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo.TextProperties">
            <summary>
            Gets the text properties.
            </summary>
            <value>
            The text properties.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo">
            <summary>
            Represents a base class that stores information about content of Office Open XML document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo.#ctor(System.Collections.Generic.ICollection{Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo" /> class.
            </summary>
            <param name="childElements">The child elements.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo.ChildElements">
            <summary>
            Gets the child elements of this content info.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentGraphics">
            <summary>
            Represents a graphics of an Open XML document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentGraphics.HasText">
            <summary>
            Gets a value indicating whether this element is supports text.
            </summary>
            <value>
              <b>True</b> if this element is supports text; otherwise, <b>false</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentGraphics.Text" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentGraphics.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentGraphics.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentGraphics.SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Sets the text properties.
            </summary>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentGraphics.SetFillColor(System.Nullable{System.Drawing.Color})">
            <summary>
            Sets the fill color of this element.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentNumbering">
            <summary>
            Provides the numbering properties of an Open XML document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentNumbering.Name">
            <summary>
            Gets the numbering name.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDrawingObjectProperties">
            <summary>
            Represents the properties of a drawing object of Open XML document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDrawingObjectProperties.Name">
            <summary>
            Gets or sets the name of drawing object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphJustification">
            <summary>
            Specifies available types of paragraph justification.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphJustification.Left">
            <summary>
            The left justification.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphJustification.Center">
            <summary>
            The center justification.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphJustification.Right">
            <summary>
            The right justification.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphJustification.Both">
            <summary>
            Justification by width.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties">
            <summary>
            Provides information about paragraph properties of Open XML document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this paragraph properties are empty.
            </summary>
            <value>
            <b>True</b> if this paragraph properties are empty; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.Justification">
            <summary>
            Gets or sets the paragraph justification.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.WidowControl">
            <summary>
            Gets or sets a value indicating whether widow control is enabled.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.KeepNext">
            <summary>
            Gets or sets a value indicating whether this paragraph should not be separated from the next paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.KeepLines">
            <summary>
            Gets or sets a value indicating whether this paragraph should not be broken.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.PageBreakBefore">
            <summary>
            Gets or sets a value indicating whether this paragraph should be started from new page. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.SpacingBeforeParagraph">
            <summary>
            Gets or sets the spacing, in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />, before paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.SpacingAfterParagraph">
            <summary>
            Gets or sets the spacing, in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />, after paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LeftIndentation">
            <summary>
            Gets or sets the left indentation, in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />, of paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.RightIndentation">
            <summary>
            Gets or sets the right indentation, in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />, of paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.FirstLineIndentation">
            <summary>
            Gets or sets the first line indentation, in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />, of paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.FillColor">
            <summary>
            Gets or sets the fill color of the paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightFactor">
            <summary>
            Gets or sets the line height factor of paragraph.
            </summary>
            <value>
            Minimum value is 0.06, maximum value is 132.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <b>value</b> is less than 0.06 or greater than 132.</exception>
            <remarks>
            <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightFactor" /> property has priority over <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" /> property.
            <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" /> property has priority over <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightMinimum" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightMinimum" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact">
            <summary>
            Gets or sets the line height, in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />, of paragraph.
            </summary>
            <value>
            Minimum value is 0.7, maximum value is 1584.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <b>value</b> is less than 0.7 or greater than 1584.</exception>
            <remarks>
            <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightFactor" /> property has priority over <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" /> property.
            <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" /> property has priority over <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightMinimum" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightFactor" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightMinimum" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightMinimum">
            <summary>
            Gets or sets the line height, in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />, that is specified using minimum rule.
            </summary>
            <value>
            Minimum value is 0, maximum value is 1584.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <b>value</b> is less than 0 or greater than 1584.</exception>
            <remarks>
            <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightFactor" /> property has priority over <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" /> property.
            <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" /> property has priority over <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightMinimum" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightFactor" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.LineHeightExact" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.Numeration">
            <summary>
            Gets or sets the numeration of paragraph.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.NumerationLevel">
            <summary>
            Gets or sets the numeration level of paragraph.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Clone of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.GetChanges(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties)">
            <summary>
            Returns paragraph properties, which contain changed properties between old and new paragraph properties.
            </summary>
            <param name="oldParagraphProperties">The old paragraph properties.</param>
            <param name="newParagraphProperties">The new paragraph properties.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties" /> that contains changed properties.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="oldParagraphProperties" /> or <paramref name="newParagraphProperties" /> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties.RemoveNumeration">
            <summary>
            Removes the numeration.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent">
            <summary>
            Represents the composition of text content of an Open XML document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent.#ctor(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent" /> class.
            </summary>
            <param name="textContent">Content of the text.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent.AppendText(System.String)">
            <summary>
            Appends the text to the last text content.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent.GetParagraphs">
            <summary>
            Returns the paragraphs, which contain this text content.
            </summary>
            <returns>The paragraphs, which contain this text content.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent.SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Sets the text properties.
            </summary>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlCompositeTextContent.SetParagraphProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties)">
            <summary>
            Sets the paragraph properties of this text content.
            </summary>
            <param name="paragraphProperties">The paragraph properties.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage">
            <summary>
            Represents an image of an Open XML document.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Images" />
            <example> 
            This example shows how to set barcode image in DOCX document 
            (example uses template document <a href="content/Edit_Docx_Content/SetBarcodeImage_template.docx">SetBarcodeImage_template.docx</a>):
            <code lang="VB.NET">
            Public Shared Sub DocxSetBarcodeImageExample()
                Dim templateFilename As String = "SetBarcodeImage_template.docx"
                Dim outFilename As String = "SetBarcodeImage.docx"
                Dim outPdfFilename As String = "SetBarcodeImage.pdf"
            
                ' create DocxDocumentEditor that allows to edit file "SetBarcodeImage_template.docx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename)
                    ' get document body
                    Dim documentBody As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement = editor.Body
            
                    ' find text content "Invoice number:" 
                    Dim textContent As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent = documentBody.FindText("Invoice number:")
            
                    ' get barcode value as text of next paragraph after "Invoice number:" 
                    Dim barcodeValue As String = textContent.FindAfter(Of Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph)().Text
                    barcodeValue = barcodeValue.TrimEnd(ControlChars.Lf)
            
                    ' create and setup barcode generator
                    Dim barcodeGenerator As New Vintasoft.Barcode.BarcodeWriter()
                    barcodeGenerator.Settings.Barcode = Vintasoft.Barcode.BarcodeType.QR
                    barcodeGenerator.Settings.SetWidth(200)
                    barcodeGenerator.Settings.Value = barcodeValue
            
                    ' generate barcode image
                    Using barcodeImage As New Vintasoft.Imaging.VintasoftImage(barcodeGenerator.GetBarcodeAsVintasoftBitmap(), True)
                        ' crop barcode to rectangular image
                        barcodeImage.Crop(New System.Drawing.Rectangle(0, 0, barcodeImage.Width, barcodeImage.Width))
            
                        ' set barcode image to DOCX image at index 0
                        editor.Images(0).SetImage(barcodeImage)
                    End Using
            
                    ' save changed document to a DOCX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void DocxSetBarcodeImageExample()
            {
                string templateFilename = "SetBarcodeImage_template.docx";
                string outFilename = "SetBarcodeImage.docx";
                string outPdfFilename = "SetBarcodeImage.pdf";
            
                // create DocxDocumentEditor that allows to edit file "SetBarcodeImage_template.docx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename))
                {
                    // get document body
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement documentBody = editor.Body;
            
                    // find text content "Invoice number:" 
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent textContent = documentBody.FindText("Invoice number:");
            
                    // get barcode value as text of next paragraph after "Invoice number:" 
                    string barcodeValue = textContent.FindAfter&lt;Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph&gt;().Text;
                    barcodeValue = barcodeValue.TrimEnd('\n');
            
                    // create and setup barcode generator
                    Vintasoft.Barcode.BarcodeWriter barcodeGenerator = new Vintasoft.Barcode.BarcodeWriter();
                    barcodeGenerator.Settings.Barcode = Vintasoft.Barcode.BarcodeType.QR;
                    barcodeGenerator.Settings.SetWidth(200);
                    barcodeGenerator.Settings.Value = barcodeValue;
            
                    // generate barcode image
                    using (Vintasoft.Imaging.VintasoftImage barcodeImage = 
                        new Vintasoft.Imaging.VintasoftImage(barcodeGenerator.GetBarcodeAsVintasoftBitmap(), true))
                    {
                        // crop barcode to rectangular image
                        barcodeImage.Crop(new System.Drawing.Rectangle(0, 0, barcodeImage.Width, barcodeImage.Width));
            
                        // set barcode image to DOCX image at index 0
                        editor.Images[0].SetImage(barcodeImage);
                    }
            
                    // save changed document to a DOCX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.ContentType">
            <summary>
            Gets the MIME type of content image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.Properties">
            <summary>
            Gets the properties of this image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.GetImage">
            <summary>
            Returns an image of this image element.
            </summary>
            <returns>An image of this image element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.SetImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Sets an image of this image element.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.SetImage(Vintasoft.Imaging.VintasoftImage,System.Boolean)">
            <summary>
            Sets an image of this image element.
            </summary>
            <param name="image">The image.</param>
            <param name="allocateNewResource">
            <b>True</b> - image element must encode image data to the new resource; 
            <b>false</b> - image element must encode image data to the existing resource.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.SetImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Sets the image in format that is specified by encoder.
            </summary>
            <param name="image">The image.</param>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage.SetImage(System.IO.Stream)">
            <summary>
            Sets the image.
            </summary>
            <param name="imageStream">The stream that contains image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>imageStream</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if SDK cannot find decoder for image in <i>imageStream</i>.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentRootElement">
            <summary>
            Represents the root element of an Open XML document.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Body" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentRootElement.Remove">
            <summary>
            Removes this element from document.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentStyle">
            <summary>
            Provides the style properties of an Open XML document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentStyle.Name">
            <summary>
            Gets the style name.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor">
            <summary>
            Defines the editor of DOCX document.
            </summary>
            <example> 
            This example shows how to find and replace text in DOCX document 
            (example uses template document <a href="content/Edit_Docx_Content/FindAndReplaceText_template.docx">FindAndReplaceText_template.docx</a>):
            <code lang="VB.NET">
            Public Shared Sub DocxFindAndReplaceTextExample()
                Dim templateFilename As String = "FindAndReplaceText_template.docx"
                Dim outFilename As String = "FindAndReplaceText.docx"
                Dim outPdfFilename As String = "FindAndReplaceText.pdf"
            
                ' create DocxDocumentEditor that allows to edit file "FindAndReplaceText_template.docx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename)
                    ' get document body
                    Dim documentBody As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement = editor.Body
            
                    ' replace first occurrence of text "[field1]" by text "value1"
                    documentBody("[field1]") = "value1"
            
                    ' replace all occurrences of text "[field2]" by text "value2"
                    documentBody.ReplaceText("[field2]", "value2")
            
                    ' find text content that corresponds to the text "[field3]"
                    Dim field3Content As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent = documentBody.FindText("[field3]")
                    ' change text in found text content
                    field3Content.Text = "value3"
            
                    ' replace text "[multiline_field]" by multiline text
                    documentBody("[multiline_field]") = vbLf &amp; "line1" &amp; vbLf &amp; "line2" &amp; vbLf &amp; "line3"
            
                    ' save changed document to a DOCX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void DocxFindAndReplaceTextExample()
            {
                string templateFilename = "FindAndReplaceText_template.docx";
                string outFilename = "FindAndReplaceText.docx";
                string outPdfFilename = "FindAndReplaceText.pdf";
            
                // create DocxDocumentEditor that allows to edit file "FindAndReplaceText_template.docx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename))
                {
                    // get document body
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement documentBody = editor.Body;
            
                    // replace first occurrence of text "[field1]" by text "value1"
                    documentBody["[field1]"] = "value1";
            
                    // replace all occurrences of text "[field2]" by text "value2"
                    documentBody.ReplaceText("[field2]", "value2");
            
                    // find text content that corresponds to the text "[field3]"
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent field3Content = documentBody.FindText("[field3]");
                    // change text in found text content
                    field3Content.Text = "value3";
            
                    // replace text "[multiline_field]" by multiline text
                    documentBody["[multiline_field]"] = "\nline1\nline2\nline3";
            
                    // save changed document to a DOCX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" />
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage" />
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor" /> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor" /> class.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.#ctor(Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor" /> class.
            </summary>
            <param name="document">The DOCX document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Tables">
            <summary>
            Gets all tables, which are contained in this document.
            </summary>
            <returns>An array that contains all tables, which are contained in this document.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Styles">
            <summary>
            Gets the styles of DOCX document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Numbering">
            <summary>
            Gets the numbering that uses in DOCX document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Headers">
            <summary>
            Gets the headers of DOCX document.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateHeader" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHeaderFooterConfiguration(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement)" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Footers">
            <summary>
            Gets the footers of DOCX document.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateFooter" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHeaderFooterConfiguration(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement)" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SectionCount">
            <summary>
            Gets the section count.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.GetPageSize(System.Int32)">
            <summary>
            Returns the page size defined in specified section.
            </summary>
            <param name="sectionIndex">Index of the section, where information about page size must be searched.</param>
            <returns>
            The page size.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHeaderFooterConfiguration(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement)">
            <summary>
            Sets the configuration of page headers and footers.
            </summary>
            <param name="defaultHeader">Default header.</param>
            <param name="defaultFooter">Default footer.</param>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Headers" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Footers" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateHeader" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateFooter" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHeaderFooterConfiguration(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement)">
            <summary>
            Sets the configuration of page headers and footers.
            </summary>
            <param name="defaultHeader">Default header.</param>
            <param name="firstHeader">Header of first page.</param>
            <param name="evenHeader">Header of even page.</param>
            <param name="defaultFooter">Default footer.</param>
            <param name="firstFooter">Footer of first page.</param>
            <param name="evenFooter">Footer of even page.</param>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Headers" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Footers" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateHeader" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateFooter" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHeaderFooterConfiguration(System.Nullable{System.Int32},Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement)">
            <summary>
            Sets the configuration of page headers and footers.
            </summary>
            <param name="sectionIndex">The section index.</param>
            <param name="defaultHeader">Default header.</param>
            <param name="firstHeader">Header of first page.</param>
            <param name="evenHeader">Header of even page.</param>
            <param name="defaultFooter">Default footer.</param>
            <param name="firstFooter">Footer of first page.</param>
            <param name="evenFooter">Footer of even page.</param>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Headers" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Footers" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateHeader" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateFooter" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.GetHeaderFooterConfiguration(System.Int32,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement@,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement@,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement@,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement@,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement@,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement@)">
            <summary>
            Returns the configuration of page headers and footers.
            </summary>
            <param name="sectionIndex">The section index.</param>
            <param name="defaultHeader">Default header.</param>
            <param name="firstHeader">Header of first page.</param>
            <param name="evenHeader">Header of even page.</param>
            <param name="defaultFooter">Default footer.</param>
            <param name="firstFooter">Footer of first page.</param>
            <param name="evenFooter">Footer of even page.</param>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Headers" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Footers" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateHeader" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateFooter" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateHeader">
            <summary>
            Creates a new header.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Headers" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHeaderFooterConfiguration(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement)" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.CreateFooter">
            <summary>
            Creates a new footer.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Footers" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHeaderFooterConfiguration(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement)" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.GetTextProperties(Vintasoft.Imaging.Text.TextRegionSymbol)">
            <summary>
            Returns the text properties of specified text symbol.
            </summary>
            <param name="symbol">The text symbol.</param>
            <returns>
            The text properties.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.GetParagraphProperties(Vintasoft.Imaging.Text.TextRegionSymbol)">
            <summary>
            Returns the text properties of specified text symbol.
            </summary>
            <param name="symbol">The text symbol.</param>
            <returns>
            The text properties.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.SetHyperlink(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent,System.String)">
            <summary>
            Sets the hyperlink for specified text content.
            </summary>
            <param name="textContent">The text content.</param>
            <param name="hyperlink">The hyperlink.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyle">
            <summary>
            Provides the style properties of DOCX document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyle.StyleId">
            <summary>
            Gets the style identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyle.Name">
            <summary>
            Gets the style name.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyleDefinitions">
            <summary>
            Provides the style definitions of DOCX document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyleDefinitions.Items">
            <summary>
            Gets the collection that contains styles of DOCX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyleDefinitions.FindByName(System.String)">
            <summary>
            Searches the style by style name.
            </summary>
            <param name="styleName">Name of the style.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyle" /> with specified name.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyleDefinitions.FindById(System.String)">
            <summary>
            Searches the style by style identifier.
            </summary>
            <param name="styleId">The identifier of the style.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentStyle" /> with specified identifier.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph">
            <summary>
            Represents the paragraph of an Open XML document.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph.ParagraphBreak">
            <summary>
            The character sequence that represents paragraph break.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph.Text">
            <summary>
            Gets or sets text, which is associated with this element.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph.HasContent">
            <summary>
            Gets a value indicating whether this element has content.
            </summary>
            <value>
              <b>True</b> if this element has content; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph.Append``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends the specified content to the children of this element.
            </summary>
            <param name="content">The content info.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph.SetParagraphProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties)">
            <summary>
            Sets the paragraph properties.
            </summary>
            <param name="paragraphProperties">The paragraph properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentParagraph.FindTextNext(System.Int32@,System.String)">
            <summary>
            Finds the specified text at specified index.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="text">The text to search.</param>
            <returns>
            A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" /> class.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor">
            <summary>
            Defines the editor of an Office Open XML document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Body">
            <summary>
            Gets the body (root element) of Open XML document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Images">
            <summary>
            Gets all images, which are contained in this document.
            </summary>
            <returns>An array that contains all images, which are contained in this document.</returns>
            <example>Please see example <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage">here</see>.</example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Charts">
            <summary>
            Gets all charts, which are contained in this document.
            </summary>
            <returns>An array that contains all charts, which are contained in this document.</returns>
            <example>Please see example <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentChart">here</see>.</example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.DocumentProperties">
            <summary>
            Gets information (author, modification date, etc) about document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Save(System.IO.Stream)">
            <summary>
            Saves this document to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Save(System.String)">
            <summary>
            Saves this document to a file with specified path.
            </summary>
            <param name="filename">A file name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Export(System.String)">
            <summary>
            Exports this document to a file with specified path.
            </summary>
            <param name="filename">A file name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Export(System.String,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Exports this document to a file with specified path.
            </summary>
            <param name="filename">A file name.</param>
            <param name="layoutSettings">The layout settings.</param>
            <param name="renderingSettings">The rendering settings.</param>
            <exception cref="T:System.ArgumentException">Thrown if editor cannot create encoder for specified file extension.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Export(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Exports this document to a file with specified path.
            </summary>
            <param name="filename">A file name.</param>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Export(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Exports this document to the specified stream using specified encoder.
            </summary>
            <param name="stream">The stream to export document.</param>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Export(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Exports this document to the specified stream using specified encoder.
            </summary>
            <param name="stream">The stream to export document.</param>
            <param name="encoder">The encoder.</param>
            <param name="layoutSettings">The layout settings.</param>
            <param name="renderingSettings">The rendering settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement">
            <summary>
            Represents a base class that all elements in an Office Open XML document editor derive from.
            </summary>    
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.TextBreak">
            <summary>
            A string that represents text break.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Item(System.String)">
            <summary>
            Sets the text that corresponds to the specified text.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.FindText(System.String)" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Item(System.Int32)">
            <summary>
            Gets the child element at specified index.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this element does not have child elements (<see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.HasChildren" />).</exception>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.HasChildren" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.ChildCount">
            <summary>
            Gets the child count.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.HasChildren">
            <summary>
            Gets a value indicating whether this element has child elements.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.ChildElements">
            <summary>
            Gets the collection that contains all child nodes of this element.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Parent">
            <summary>
            Get the parent element of this element.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Root">
            <summary>
            Get the root element of this element.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentEditor.Body" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Text">
            <summary>
            Gets or sets text, which is associated with this element.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.HasText">
            <summary>
            Gets a value indicating whether this element is supports text.
            </summary>
            <value>
            <b>True</b> if this element is supports text; otherwise, <b>false</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Text" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.HasContent">
            <summary>
            Gets a value indicating whether this element has content.
            </summary>
            <value>
            <b>True</b> if this element has content; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Next">
            <summary>
            Gets the next element of current level in OpenXML document.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Prev" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Prev">
            <summary>
            Gets the previous element of current level in OpenXML document.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Next" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Append``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends the specified content to the children of this element.
            </summary>
            <param name="content">The content info.</param>
            <typeparam name="T">The content element type.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.RemoveAllChildren">
            <summary>
            Removes all children of this element.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetTextSubregion(Vintasoft.Imaging.Text.TextRegion)">
            <summary>
            Returns text subregion that corresponds to this element in specified text region.
            </summary>
            <param name="textRegion">The text region.</param>
            <returns>Text region that corresponds to this element in specified text region.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetTextContent(System.Object)">
            <summary>
            Returns the text content by specified source.
            </summary>
            <param name="source">The source.</param>
            <returns>The text content.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.FindAfter``1">
            <summary>
            Finds the first element of specified type after this element.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The first element of specified type after this element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.FindBefore``1">
            <summary>
            Finds the first element of specified type before this element.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The first element of specified type before this element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Select``1">
            <summary>
            Selects all child elements of specified type.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <returns>A list that contains all child elements of specified type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetFirstChild``1">
            <summary>
            Returns the first child (of specified type) of this element.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The first child (of specified type) of this element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetLastChild``1">
            <summary>
            Returns the last child (of specified type) of this element.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The last child (of specified type) of this element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetParent``1">
            <summary>
            Returns the parent (of specified type) of this element.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The parent (of specified type) of this element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Clone">
            <summary>
            Clones this element.
            </summary>
            <returns>Copy of this element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Remove">
            <summary>
            Removes this element from document.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Parent" /> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Contains(System.String)">
            <summary>
            Returns a value indicating whether this element contains the text.
            </summary>
            <param name="text">The text.</param>
            <returns>
            <b>True</b> if this element contains the specified text; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.FindText(System.String)">
            <summary>
            Finds the specified text.
            </summary>
            <param name="text">The text to search.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" /> class.</returns>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.FindTextNext(System.Int32@,System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.FindTextNext(System.Int32@,System.String)">
            <summary>
            Finds the specified text at specified index.
            </summary>
            <param name="text">The text to search.</param>
            <param name="startIndex">The zero-based start index.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.ReplaceText(System.String,System.String)">
            <summary>
            Replaces all occurrences of specified string in <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.Text" />.
            </summary>
            <param name="oldValue">A string to be replaced.</param>
            <param name="newValue">A string to replace all occurrences of <paramref name="oldValue" />.</param>
            <returns><b>True</b> if replace is performed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.SetFillColor(System.Nullable{System.Drawing.Color})">
            <summary>
            Sets the fill color of this element.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Sets the text properties.
            </summary>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.SetTextProperties(System.String,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Sets text properties of specified text.
            </summary>
            <param name="text">The text for which properties must be set.</param>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.InsertCopyBeforeSelf">
            <summary>
            Inserts a copy of this element before this element.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.InsertCopyAfterSelf">
            <summary>
            Inserts a copy of this element after this element.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetTextContent">
            <summary>
            Returns the text content of this element.
            </summary>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetTextContent(System.Int32,System.Int32)">
            <summary>
            Returns the text content of this element.
            </summary>
            <param name="index">The start index of the text.</param>
            <param name="length">The text length.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.ToString">
            <summary>
            Converts this element to a string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection">
            <summary>
            Represents a collection of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" /> elements.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1">
            <summary>
            Represents a collection of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" /> elements.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" />.
            </value>
            <param name="index">The index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Add(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo)">
            <summary>
            Adds an <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" />, which must be created from <paramref name="contentInfo" />, to the collection.
            </summary>
            <param name="contentInfo">The content info to add into the collection.</param>
            <returns>
            An <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" />, which is created from <paramref name="contentInfo" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Contains(`0)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
            <b>True</b> if item is found in the collection; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from collection. 
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
            The index of item if item is found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Insert(System.Int32,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlContentInfo)">
            <summary>
            Inserts an <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" />, which must be created from <paramref name="contentInfo" />, to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="contentInfo">The content info to insert into the collection.</param>
            <returns>
            An <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement" />, which is created from <paramref name="contentInfo" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>
            <b>True</b> if item was successfully removed from the collection; otherwise, <b>false</b>.
            This method also returns <b>false</b> if item is not found in the original collection.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the collection item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElementCollection`1.ToArray">
            <summary>
            Copies the elements of the collection to a new array.
            </summary>
            <returns>An array containing copies of the elements of the collection.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell">
            <summary>
            Represents the cell of the Open XML document table.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell.Row">
            <summary>
            Gets the row that contains this cell.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell.ColumnSpan">
            <summary>
            Gets the column span.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell.Remove">
            <summary>
            Removes content of this cell.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell.SetBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell)">
            <summary>
            Sets cell borders from specified table cell.
            </summary>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <example> 
            This example shows how to set table borders from sample table cell
            (example uses template document <a href="content/Edit_Docx_Content/SetTableBorders_template.docx">SetTableBorders_template.docx</a>):
            <code lang="VB.NET">
            Public Shared Sub DocxSetTableBordersExample()
                Dim templateFilename As String = "SetTableBorders_template.docx"
                Dim outFilename As String = "SetTableBorders.docx"
                Dim outPdfFilename As String = "SetTableBorders.pdf"
            
                ' create DocxDocumentEditor that allows to edit file "SetTableBorders_template.docx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename)
                    ' get cell border templates
                    Dim bordersTemplateTable As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable = editor.Tables(0)
                    Dim boldBorderTemplate As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell = bordersTemplateTable.FindCell("[bold]")
                    Dim colorBorderTemplate As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell = bordersTemplateTable.FindCell("[color]")
            
                    ' remove border template table
                    bordersTemplateTable.Remove()
            
                    ' get test table
                    Dim table As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable = editor.Tables(0)
            
                    ' set borders from template cells
                    table.FindRow("[bold_row]").SetBorder(boldBorderTemplate)
                    table.FindCell("[bold_cell]").SetBorder(boldBorderTemplate)
                    table.FindRow("[color_row]").SetBorder(colorBorderTemplate)
                    table.FindCell("[color_cell]").SetBorder(colorBorderTemplate)
            
                    ' set outside border inside table
                    table.SetOutsideBorder(table.FindCell("[bold_first]"), table.FindCell("[bold_last]"), boldBorderTemplate)
            
                    ' save changed document to a DOCX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void DocxSetTableBordersExample()
            {
                string templateFilename = "SetTableBorders_template.docx";
                string outFilename = "SetTableBorders.docx";
                string outPdfFilename = "SetTableBorders.pdf";
            
                // create DocxDocumentEditor that allows to edit file "SetTableBorders_template.docx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename))
                {
                    // get cell border templates
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable bordersTemplateTable =
                        editor.Tables[0];
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell boldBorderTemplate =
                        bordersTemplateTable.FindCell("[bold]");
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell colorBorderTemplate =
                        bordersTemplateTable.FindCell("[color]");
            
                    // remove border template table
                    bordersTemplateTable.Remove();
            
                    // get test table
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable table = editor.Tables[0];
            
                    // set borders from template cells
                    table.FindRow("[bold_row]").SetBorder(boldBorderTemplate);
                    table.FindCell("[bold_cell]").SetBorder(boldBorderTemplate);
                    table.FindRow("[color_row]").SetBorder(colorBorderTemplate);
                    table.FindCell("[color_cell]").SetBorder(colorBorderTemplate);
            
                    // set outside border inside table
                    table.SetOutsideBorder(table.FindCell("[bold_first]"), table.FindCell("[bold_last]"), boldBorderTemplate);
            
                    // save changed document to a DOCX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell.SetBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.BorderSide)">
            <summary>
            Sets cell borders from specified table cell.
            </summary>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <param name="borderSide">The border side.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow">
            <summary>
            Represents the row of the Open XML document table.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.Item(System.Int32)">
            <summary>
            Gets the table cell at the specified index.
            </summary>
            <value>
            The <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow" />.
            </value>
            <param name="cellIndex">The cell index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.Text">
            <summary>
            Gets or sets text, which is associated with this element.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.Table">
            <summary>
            Gets the table that contains this row.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.Height">
            <summary>
            Gets or sets the row height, in Points (1/72 inch).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.ColumnCount">
            <summary>
            Gets the column count, include columns span.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell.ColumnSpan" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.FindCell(System.String)">
            <summary>
            Returns the first table cell that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The cell that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.FindCell``1(System.String)">
            <summary>
            Returns the first table cell that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The cell that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.SetBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell)">
            <summary>
            Sets the border of this row from specified table cell.
            </summary>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <example> 
            This example shows how to set table borders from sample table cell
            (example uses template document <a href="content/Edit_Docx_Content/SetTableBorders_template.docx">SetTableBorders_template.docx</a>):
            <code lang="VB.NET">
            Public Shared Sub DocxSetTableBordersExample()
                Dim templateFilename As String = "SetTableBorders_template.docx"
                Dim outFilename As String = "SetTableBorders.docx"
                Dim outPdfFilename As String = "SetTableBorders.pdf"
            
                ' create DocxDocumentEditor that allows to edit file "SetTableBorders_template.docx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename)
                    ' get cell border templates
                    Dim bordersTemplateTable As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable = editor.Tables(0)
                    Dim boldBorderTemplate As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell = bordersTemplateTable.FindCell("[bold]")
                    Dim colorBorderTemplate As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell = bordersTemplateTable.FindCell("[color]")
            
                    ' remove border template table
                    bordersTemplateTable.Remove()
            
                    ' get test table
                    Dim table As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable = editor.Tables(0)
            
                    ' set borders from template cells
                    table.FindRow("[bold_row]").SetBorder(boldBorderTemplate)
                    table.FindCell("[bold_cell]").SetBorder(boldBorderTemplate)
                    table.FindRow("[color_row]").SetBorder(colorBorderTemplate)
                    table.FindCell("[color_cell]").SetBorder(colorBorderTemplate)
            
                    ' set outside border inside table
                    table.SetOutsideBorder(table.FindCell("[bold_first]"), table.FindCell("[bold_last]"), boldBorderTemplate)
            
                    ' save changed document to a DOCX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void DocxSetTableBordersExample()
            {
                string templateFilename = "SetTableBorders_template.docx";
                string outFilename = "SetTableBorders.docx";
                string outPdfFilename = "SetTableBorders.pdf";
            
                // create DocxDocumentEditor that allows to edit file "SetTableBorders_template.docx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename))
                {
                    // get cell border templates
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable bordersTemplateTable =
                        editor.Tables[0];
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell boldBorderTemplate =
                        bordersTemplateTable.FindCell("[bold]");
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell colorBorderTemplate =
                        bordersTemplateTable.FindCell("[color]");
            
                    // remove border template table
                    bordersTemplateTable.Remove();
            
                    // get test table
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable table = editor.Tables[0];
            
                    // set borders from template cells
                    table.FindRow("[bold_row]").SetBorder(boldBorderTemplate);
                    table.FindCell("[bold_cell]").SetBorder(boldBorderTemplate);
                    table.FindRow("[color_row]").SetBorder(colorBorderTemplate);
                    table.FindCell("[color_cell]").SetBorder(colorBorderTemplate);
            
                    // set outside border inside table
                    table.SetOutsideBorder(table.FindCell("[bold_first]"), table.FindCell("[bold_last]"), boldBorderTemplate);
            
                    // save changed document to a DOCX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.SetBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.BorderSide)">
            <summary>
            Sets the border of this row from specified table cell.
            </summary>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <param name="borderSide">The border side.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.SetBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,System.Int32,System.Int32)">
            <summary>
            Sets the border of this row from specified table cell.
            </summary>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <param name="firstCellIndex">The zero-based index of first cell in thisrow.</param>
            <param name="lastCellIndex">The zero-based index of last cell in thisrow.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow.SetBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,System.Int32,System.Int32,Vintasoft.Imaging.Office.BorderSide)">
            <summary>
            Sets the border of this row from specified table cell.
            </summary>
            <param name="borderSource">The border source.</param>
            <param name="firstCellIndex">The zero-based index of first cell in thisrow.</param>
            <param name="lastCellIndex">The zero-based index of last cell in thisrow.</param>
            <param name="borderSide">The border side.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable">
            <summary>
            Represents the table of an Open XML document.
            </summary>
            <example> 
            This example shows how to fill data table 
            (example uses template document <a href="content/Edit_Docx_Content/CopyTableRow_template.docx">CopyTableRow_template.docx</a>):
            <code lang="VB.NET">
            Public Shared Sub DocxCopyTableRowExample()
                Dim templateFilename As String = "CopyTableRow_template.docx"
                Dim outFilename As String = "CopyTableRow.docx"
                Dim outPdfFilename As String = "CopyTableRow.pdf"
            
                ' create DocxDocumentEditor that allows to edit file "CopyTableRow_template.docx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename)
                    ' get document body
                    Dim documentBody As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement = editor.Body
            
                    ' get the first table
                    Dim table As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable = editor.Tables(0)
                    ' get the second table that contains template row
                    Dim templateRow As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow = table(1)
            
                    ' create an array that contains colors
                    Dim colors As System.Drawing.Color() = New System.Drawing.Color() {System.Drawing.Color.Red, System.Drawing.Color.Green, System.Drawing.Color.Blue, System.Drawing.Color.Orange, System.Drawing.Color.Yellow}
                    ' for each color
                    For i As Integer = 0 To colors.Length - 1
                        ' insert copy of template row before template row
                        Dim rowCopy As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow = DirectCast(templateRow.InsertCopyBeforeSelf(), Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)
            
                        ' set row data
                        rowCopy(0).Text = String.Format("Copy {0} ({1})", i, colors(i))
                        rowCopy("[cell1]") = String.Format("cell data {0}", i)
            
                        ' set cell colors
                        rowCopy(1).SetFillColor(colors(i))
                        rowCopy(2).SetFillColor(colors(i))
            
                        ' if color has odd index in colors array
                        If (i Mod 2) = 1 Then
                            ' set row height to 10mm
                            rowCopy.Height = Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPoints(10, Vintasoft.Imaging.UnitOfMeasure.Millimeters)
                        End If
                    Next
            
                    ' remove template row
                    templateRow.Remove()
            
                    ' save changed document to a DOCX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void DocxCopyTableRowExample()
            {
                string templateFilename = "CopyTableRow_template.docx";
                string outFilename = "CopyTableRow.docx";
                string outPdfFilename = "CopyTableRow.pdf";
            
                // create DocxDocumentEditor that allows to edit file "CopyTableRow_template.docx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename))
                {
                    // get document body
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement documentBody = editor.Body;
            
                    // get the first table
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable table = editor.Tables[0];
                    // get the second table that contains template row
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow templateRow = table[1];
                    
                    // create an array that contains colors
                    System.Drawing.Color[] colors = new System.Drawing.Color[] {
                        System.Drawing.Color.Red,
                        System.Drawing.Color.Green,
                        System.Drawing.Color.Blue,
                        System.Drawing.Color.Orange,
                        System.Drawing.Color.Yellow
                    };
                    // for each color
                    for (int i = 0; i &lt; colors.Length; i++)
                    {
                        // insert copy of template row before template row
                        Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow rowCopy =
                            (Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)templateRow.InsertCopyBeforeSelf();
            
                        // set row data
                        rowCopy[0].Text = string.Format("Copy {0} ({1})", i, colors[i]);
                        rowCopy["[cell1]"] = string.Format("cell data {0}", i);
            
                        // set cell colors
                        rowCopy[1].SetFillColor(colors[i]);
                        rowCopy[2].SetFillColor(colors[i]);
            
                        // if color has odd index in colors array
                        if ((i % 2) == 1)
                        {
                            // set row height to 10mm
                            rowCopy.Height = Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPoints(10, Vintasoft.Imaging.UnitOfMeasure.Millimeters);
                        }
                    }
            
                    // remove template row
                    templateRow.Remove();
            
                    // save changed document to a DOCX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.RowCount">
            <summary>
            Gets the row count.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.Item(System.Int32)">
            <summary>
            Gets the table row at the specified index.
            </summary>
            <value>
            The <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow" />.
            </value>
            <param name="rowIndex">The row index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.Item(System.Int32,System.Int32)">
            <summary>
            Gets the table cell at the specified location.
            </summary>
            <value>
            The <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell" />.
            </value>
            <param name="x">The column index.</param>
            <param name="y">The row index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.FindImages(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)">
            <summary>
            Finds images, which are contains with specified row.
            </summary>
            <param name="row">The row.</param>
            <returns>An array of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.FindRow(System.String)">
            <summary>
            Returns the first table row that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The row that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.FindCell(System.String)">
            <summary>
            Returns the first table cell that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The cell that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.FindCell``1(System.String)">
            <summary>
            Returns the first table cell that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The cell that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.SetOutsideBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell)">
            <summary>
            Sets the outside border of this table.
            </summary>
            <param name="borderSource">The cell from which border style must be copied.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.SetOutsideBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.BorderSide)">
            <summary>
            Sets the outside border of this table.
            </summary>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <param name="borderSide">The border side.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.SetOutsideBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell)">
            <summary>
            Sets the outside border of rectangular area.
            </summary>
            <param name="firstCell">The first cell of rectangular area.</param>
            <param name="lastCell">The last cell of rectangular area.</param>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>firstCell</i> or <i>lastCell</i> is <b>null</b>.</exception>
            <example> 
            This example shows how to set table borders from sample table cell
            (example uses template document <a href="content/Edit_Docx_Content/SetTableBorders_template.docx">SetTableBorders_template.docx</a>):
            <code lang="VB.NET">
            Public Shared Sub DocxSetTableBordersExample()
                Dim templateFilename As String = "SetTableBorders_template.docx"
                Dim outFilename As String = "SetTableBorders.docx"
                Dim outPdfFilename As String = "SetTableBorders.pdf"
            
                ' create DocxDocumentEditor that allows to edit file "SetTableBorders_template.docx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename)
                    ' get cell border templates
                    Dim bordersTemplateTable As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable = editor.Tables(0)
                    Dim boldBorderTemplate As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell = bordersTemplateTable.FindCell("[bold]")
                    Dim colorBorderTemplate As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell = bordersTemplateTable.FindCell("[color]")
            
                    ' remove border template table
                    bordersTemplateTable.Remove()
            
                    ' get test table
                    Dim table As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable = editor.Tables(0)
            
                    ' set borders from template cells
                    table.FindRow("[bold_row]").SetBorder(boldBorderTemplate)
                    table.FindCell("[bold_cell]").SetBorder(boldBorderTemplate)
                    table.FindRow("[color_row]").SetBorder(colorBorderTemplate)
                    table.FindCell("[color_cell]").SetBorder(colorBorderTemplate)
            
                    ' set outside border inside table
                    table.SetOutsideBorder(table.FindCell("[bold_first]"), table.FindCell("[bold_last]"), boldBorderTemplate)
            
                    ' save changed document to a DOCX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void DocxSetTableBordersExample()
            {
                string templateFilename = "SetTableBorders_template.docx";
                string outFilename = "SetTableBorders.docx";
                string outPdfFilename = "SetTableBorders.pdf";
            
                // create DocxDocumentEditor that allows to edit file "SetTableBorders_template.docx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename))
                {
                    // get cell border templates
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable bordersTemplateTable =
                        editor.Tables[0];
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell boldBorderTemplate =
                        bordersTemplateTable.FindCell("[bold]");
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell colorBorderTemplate =
                        bordersTemplateTable.FindCell("[color]");
            
                    // remove border template table
                    bordersTemplateTable.Remove();
            
                    // get test table
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable table = editor.Tables[0];
            
                    // set borders from template cells
                    table.FindRow("[bold_row]").SetBorder(boldBorderTemplate);
                    table.FindCell("[bold_cell]").SetBorder(boldBorderTemplate);
                    table.FindRow("[color_row]").SetBorder(colorBorderTemplate);
                    table.FindCell("[color_cell]").SetBorder(colorBorderTemplate);
            
                    // set outside border inside table
                    table.SetOutsideBorder(table.FindCell("[bold_first]"), table.FindCell("[bold_last]"), boldBorderTemplate);
            
                    // save changed document to a DOCX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.SetOutsideBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.BorderSide)">
            <summary>
            Sets the outside border of rectangular area.
            </summary>
            <param name="firstCell">The first cell of rectangular area.</param>
            <param name="lastCell">The last cell of rectangular area.</param>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <param name="borderSide">The border side.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>firstCell</i> or <i>lastCell</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.SetOutsideBorder(System.Drawing.Rectangle,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell)">
            <summary>
            Sets the outside border of cells.
            </summary>
            <param name="cellRect">The rectangle in table grid.
            For example, "Rectangle(1, 0, 2, 3)" means that outside border must be set for the following cells: [1,0], [2,0], [1,1], [2,1], [1,2], [2,2].</param>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>borderSource</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTable.SetOutsideBorder(System.Drawing.Rectangle,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.BorderSide)">
            <summary>
            Sets the outside border of cells.
            </summary>
            <param name="cellRect">The rectangle in table grid.
            For example, "Rectangle(1, 0, 2, 3)" means that outside border must be set for the following cells: [1,0], [2,0], [1,1], [2,1], [1,2], [2,2].</param>
            <param name="borderSource">The cell from which border style must be copied.</param>
            <param name="borderSide">The border side.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>borderSource</i> is <b>null</b>.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent">
            <summary>
            Represents the text content of an Open XML document.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement.FindText(System.String)" />
            <example> 
            This example shows how to change text properties of text content 
            (example uses template document <a href="content/Edit_Docx_Content/ChangeTextProperties_template.docx">ChangeTextProperties_template.docx</a>):
            <code lang="VB.NET">
            Public Shared Sub DocxChangeTextPropertiesExample()
                Dim templateFilename As String = "ChangeTextProperties_template.docx"
                Dim outFilename As String = "ChangeTextProperties.docx"
                Dim outPdfFilename As String = "ChangeTextProperties.pdf"
            
                ' create DocxDocumentEditor that allows to edit file "ChangeTextProperties_template.docx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename)
                    ' get document body
                    Dim documentBody As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement = editor.Body
            
                    ' set text color
                    documentBody.FindText("COLOR").Substring(0, 2).SetTextProperties(CreateColorTextProperties(System.Drawing.Color.Red))
                    documentBody.FindText("COLOR").Substring(2, 1).SetTextProperties(CreateColorTextProperties(System.Drawing.Color.Green))
                    documentBody.FindText("COLOR").Substring(3, 2).SetTextProperties(CreateColorTextProperties(System.Drawing.Color.Blue))
            
                    ' highlight text
                    Dim highlightedTextProperties As New Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties()
                    highlightedTextProperties.Highlight = Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Green
                    documentBody.FindText("highlighted text").SetTextProperties(highlightedTextProperties)
            
                    ' set text "bold text" as bold text
                    documentBody.FindText("bold text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.BoldText)
            
                    ' set text "italic text" as italic text
                    documentBody.FindText("italic text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.ItalicText)
            
                    ' set text "underline text" as underline text
                    documentBody.FindText("underline text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.UnderlineText)
            
                    ' set text "strike text" as striked out text
                    documentBody.FindText("strike text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.StrikeText)
            
                    ' change font size
                    Dim setTextSize As New Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties()
                    setTextSize.FontSize = 16
                    documentBody.FindText("text with size 16pt").Substring(0, 4).SetTextProperties(setTextSize)
            
                    ' change text style
                    Dim setTextStyle As New Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties()
                    setTextStyle.Style = editor.Styles.FindByName("RedStyle")
                    documentBody.FindText("RedStyle").SetTextProperties(setTextStyle)
            
                    ' save changed document to a DOCX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Creates the color text properties.
            ''' &lt;/summary&gt;
            ''' &lt;param name="color"&gt;The color.&lt;/param&gt;
            Private Shared Function CreateColorTextProperties(color As System.Drawing.Color) As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties
                Dim result As New Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties()
                result.Color = color
                Return result
            End Function
            </code>
            <code lang="C#">
            public static void DocxChangeTextPropertiesExample()
            {
                string templateFilename = "ChangeTextProperties_template.docx";
                string outFilename = "ChangeTextProperties.docx";
                string outPdfFilename = "ChangeTextProperties.pdf";
            
                // create DocxDocumentEditor that allows to edit file "ChangeTextProperties_template.docx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor(templateFilename))
                {
                    // get document body
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentElement documentBody = editor.Body;
            
                    // set text color
                    documentBody.FindText("COLOR").Substring(0, 2).SetTextProperties(CreateColorTextProperties(System.Drawing.Color.Red));
                    documentBody.FindText("COLOR").Substring(2, 1).SetTextProperties(CreateColorTextProperties(System.Drawing.Color.Green));
                    documentBody.FindText("COLOR").Substring(3, 2).SetTextProperties(CreateColorTextProperties(System.Drawing.Color.Blue));
            
                    // highlight text
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties highlightedTextProperties =
                        new Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties();
                    highlightedTextProperties.Highlight = Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Green;
                    documentBody.FindText("highlighted text").SetTextProperties(highlightedTextProperties);
            
                    // set text "bold text" as bold text
                    documentBody.FindText("bold text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.BoldText);
            
                    // set text "italic text" as italic text
                    documentBody.FindText("italic text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.ItalicText);
            
                    // set text "underline text" as underline text
                    documentBody.FindText("underline text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.UnderlineText);
            
                    // set text "strike text" as striked out text
                    documentBody.FindText("strike text").SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.StrikeText);
            
                    // change font size
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties setTextSize =
                        new Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties();
                    setTextSize.FontSize = 16;
                    documentBody.FindText("text with size 16pt").Substring(0, 4).SetTextProperties(setTextSize);
            
                    // change text style
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties setTextStyle =
                        new Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties();
                    setTextStyle.Style = editor.Styles.FindByName("RedStyle");
                    documentBody.FindText("RedStyle").SetTextProperties(setTextStyle);
            
                    // save changed document to a DOCX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            
            /// &lt;summary&gt;
            /// Creates the color text properties.
            /// &lt;/summary&gt;
            /// &lt;param name="color"&gt;The color.&lt;/param&gt;
            private static Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties CreateColorTextProperties(System.Drawing.Color color)
            {
                Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties result =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties();
                result.Color = color;
                return result;
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.SourceElements">
            <summary>
            Gets the source elements of this text content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.Index">
            <summary>
            Gets the zero-based start index of text in <see cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.SourceElements" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.Length">
            <summary>
            Get the length of text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.IsIsolated">
            <summary>
            Gets a value indicating whether this text content is isolated.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.ToString">
            <summary>
            Converts thi text content to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.Union(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent)">
            <summary>
            Creates text content that contains union of all text between specified start and end text contents.
            </summary>
            <param name="startTextContent">The start text content.</param>
            <param name="endTextContent">The end text content.</param>
            <returns>A text content that contains union of all text between specified start and end text contents.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.SetParagraphProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlParagraphProperties)">
            <summary>
            Sets the paragraph properties of this text content.
            </summary>
            <param name="paragraphProperties">The paragraph properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.FindText(System.String)">
            <summary>
            Searches the specified text and returns it as text content.
            </summary>
            <param name="text">The text.</param>
            <returns>The text content of specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.Substring(System.Int32,System.Int32)">
            <summary>
            Returns a new text content that contains substring of this text content.
            </summary>
            <param name="index">The zero-based start index of text.</param>
            <param name="length">The length of text.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" /> class.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>lenght</i> is less or equal 0.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Sets the text properties.
            </summary>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.Remove">
            <summary>
            Removes the text.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.GetParent``1">
            <summary>
            Returns the parent of specified type of this text content.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The parent of specified type of this text content.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.FindAfter``1">
            <summary>
            Returns the first element of specified type after this text content.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The first element of specified type after this text content.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.FindBefore``1">
            <summary>
            Returns the first element of specified type before this text content.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <returns>The first element of specified type before this text content</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.GetParagraphs">
            <summary>
            Returns the paragraphs, which contain this text content.
            </summary>
            <returns>The paragraphs, which contain this text content.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent.CropSourceElements">
            <summary>
            Crops source elements. Cropped source elements contain this text only.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType">
            <summary>
            Specifies available text higlight colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Black">
            <summary>
            Black Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Blue">
            <summary>
            Blue Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Cyan">
            <summary>
            Cyan Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Green">
            <summary>
            Green Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Magenta">
            <summary>
            Magenta Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Red">
            <summary>
            Red Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.Yellow">
            <summary>
            Yellow Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.White">
            <summary>
            White Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.DarkBlue">
            <summary>
            Dark Blue Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.DarkCyan">
            <summary>
            Dark Cyan Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.DarkGreen">
            <summary>
            Dark Green Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.DarkMagenta">
            <summary>
            Dark Magenta Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.DarkRed">
            <summary>
            Dark Red Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.DarkYellow">
            <summary>
            Dark Yellow Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.DarkGray">
            <summary>
            Dark Gray Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.LightGray">
            <summary>
            Light Gray Highlighting Color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextHighlightType.None">
            <summary>
             No Text Highlighting.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties">
            <summary>
            Provides information about text properties of Open XML document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.BoldText">
            <summary>
            Gets the text properties, which specify the bold text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.ItalicText">
            <summary>
            Gets the text properties, which specify the italic text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.UnderlineText">
            <summary>
            Gets the text properties, which specify the underline text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.StrikeText">
            <summary>
            Gets the text properties, which specify the strike text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.IsEmpty">
            <summary>
            Gets or sets a value indicating whether this text properties is empty.
            </summary>
            <value>
            <b>True</b> if this text properties is empty; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.Color">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.Highlight">
            <summary>
            Gets or sets the text highlight.
            </summary>
            <remarks>
            This property is supported for DOCX documents only (<seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor" />).
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.IsItalic">
            <summary>
            Gets or sets a value indicating whether text is italic.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.IsBold">
            <summary>
            Gets or sets a value indicating whether text is bold.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.IsStrike">
            <summary>
            Gets or sets a value indicating whether text is strike.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.IsUnderline">
            <summary>
            Gets or sets a value indicating whether text is underline.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.IsDoubleStrike">
            <summary>
            Gets or sets a value indicating whether text is double strikethrough.
            </summary>
            <remarks>
            This property is supported for DOCX documents only (<seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.DocxDocumentEditor" />).
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.Underline">
            <summary>
            Gets or sets the text underline type.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.UnderlineColor">
            <summary>
            Gets or sets the color of underline.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.VerticalAlignment">
            <summary>
            Gets or sets the text vertical alignment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.FontSize">
            <summary>
            Gets or sets the text font size, measured in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <b>value</b> is less or equal to <b>0</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.FontName">
            <summary>
            Gets or sets the text font name.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.CharacterSpacing">
            <summary>
            Gets or sets the character spacing, measured in <see cref="F:Vintasoft.Imaging.UnitOfMeasure.Points" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.CharacterHorizontalScaling">
            <summary>
            Gets or sets the character horizontal scaling, measured in 1/100 of percent.
            </summary>
            <value>
            Minimum value is 0.01 (equal to 1%), maximum value is 6 (equal to 600%).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <b>value</b> is less than 0.01 or greater than 6.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.GetChanges(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties,Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Returns text properties, which contain changed properties between old and new text properties.
            </summary>
            <param name="oldTextProperties">The old text properties.</param>
            <param name="newTextProperties">The new text properties.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties" /> that contains changed properties.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="oldTextProperties" /> or <paramref name="newTextProperties" /> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType">
            <summary>
            Specifies available types of text underlines.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.Single">
            <summary>
            Single Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.Words">
            <summary>
            Underline Non-Space Characters Only.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.Double">
            <summary>
            Double Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.Thick">
            <summary>
            Thick Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.Dotted">
            <summary>
            Dotted Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DottedHeavy">
            <summary>
            Thick Dotted Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.Dash">
            <summary>
            Dashed Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DashedHeavy">
            <summary>
            Thick Dashed Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DashLong">
            <summary>
            Long Dashed Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DashLongHeavy">
            <summary>
            Thick Long Dashed Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DotDash">
            <summary>
            Dash-Dot Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DashDotHeavy">
            <summary>
            Thick Dash-Dot Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DotDotDash">
            <summary>
            Dash-Dot-Dot Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DashDotDotHeavy">
            <summary>
            Thick Dash-Dot-Dot Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.Wave">
            <summary>
            Wave Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.WavyHeavy">
            <summary>
            Heavy Wave Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.WavyDouble">
            <summary>
            Double Wave Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.None">
            <summary>
            No Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.SingleAccounting">
            <summary>
             Accounting Single Underline.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextUnderlineType.DoubleAccounting">
            <summary>
             Accounting Double Underline.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextVerticalPositionType">
            <summary>
            Specifies available types of text vertical positions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextVerticalPositionType.Baseline">
            <summary>
             Regular Vertical Positioning.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextVerticalPositionType.Superscript">
            <summary>
             Superscript.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextVerticalPositionType.Subscript">
            <summary>
             Subscript.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor">
            <summary>
            Defines the editor of XLSX document.
            </summary>
            <example> 
            This example shows how to find and replace text in XLSX document 
            (example uses template document <a href="content/Edit_Xlsx_Content/FindAndReplaceText_template.xlsx">FindAndReplaceText_template.xlsx</a>):
            <code lang="VB.NET">
            Public Shared Sub XlsxFindAndReplaceTextExample()
                Dim templateFilename As String = "FindAndReplaceText_template.xlsx"
                Dim outFilename As String = "FindAndReplaceText.xlsx"
                Dim outPdfFilename As String = "FindAndReplaceText.pdf"
            
                ' create XlsxDocumentEditor that allows to edit file "FindAndReplaceText_template.xlsx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename)
                    ' get first sheet in XLSX document
                    Dim sheet As Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet = editor.Sheets(0)
            
                    ' replace first occurrence of text "[field1]" by text "value1"
                    sheet("[field1]") = "value1"
            
                    ' replace all occurrences of text "[field2]" by text "value2"
                    sheet.ReplaceText("[field2]", "value2")
            
                    ' find text content that corresponds to the text "[field3]"
                    Dim field3Content As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent = sheet.FindText("[field3]")
                    ' change text in found text content
                    field3Content.Text = "value3"
            
                    ' replace text "[multiline_field]" by multiline text
                    sheet("[multiline_field]") = vbLf &amp; "line1" &amp; vbLf &amp; "line2" &amp; vbLf &amp; "line3"
            
                    ' save changed document to a XLSX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void XlsxFindAndReplaceTextExample()
            {
                string templateFilename = "FindAndReplaceText_template.xlsx";
                string outFilename = "FindAndReplaceText.xlsx";
                string outPdfFilename = "FindAndReplaceText.pdf";
            
                // create XlsxDocumentEditor that allows to edit file "FindAndReplaceText_template.xlsx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename))
                {
                    // get first sheet in XLSX document
                    Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet sheet = editor.Sheets[0];
            
                    // replace first occurrence of text "[field1]" by text "value1"
                    sheet["[field1]"] = "value1";
            
                    // replace all occurrences of text "[field2]" by text "value2"
                    sheet.ReplaceText("[field2]", "value2");
            
                    // find text content that corresponds to the text "[field3]"
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent field3Content = sheet.FindText("[field3]");
                    // change text in found text content
                    field3Content.Text = "value3";
            
                    // replace text "[multiline_field]" by multiline text
                    sheet["[multiline_field]"] = "\nline1\nline2\nline3";
            
                    // save changed document to a XLSX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor.Sheets" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor" /> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor" /> class.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor.Images">
            <summary>
            Gets all images, which are contained in this document.
            </summary>
            <returns>An array that contains all images, which are contained in this document.</returns>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.Images" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.FindImages(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor.Sheets">
            <summary>
            Gets all sheets, which are contained in this document.
            </summary>
            <returns>An array that contains all sheets, which are contained in this document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell">
            <summary>
            Represents the worksheet cell of XLSX document.
            </summary>
            <example> 
            This example shows how to find cell by reference and set cell formula 
            (example uses template document <a href="content/Edit_Xlsx_Content/XlsxCell_template.xlsx">XlsxCell_template.xlsx</a>):
            <code lang="VB.NET">
            Public Shared Sub XlsxCellExample()
                Dim templateFilename As String = "XlsxCell_template.xlsx"
                Dim outFilename As String = "XlsxCell.xlsx"
                Dim outPdfFilename As String = "XlsxCell.pdf"
            
                ' create XlsxDocumentEditor that allows to edit file "SetBarcodeImage_template.xlsx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename)
                    ' get first sheet in XLSX document
                    Dim sheet As Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet = editor.Sheets(0)
            
                    ' find cell by reference (A1 format) and set cell fill color
                    sheet.FindCellByName("B3").SetFillColor(System.Drawing.Color.Red)
                    sheet.FindCellByName("D3").SetFillColor(System.Drawing.Color.Yellow)
                    sheet.FindCellByName("C4").SetFillColor(System.Drawing.Color.Green)
                    sheet.FindCellByName("D5").SetFillColor(System.Drawing.Color.Blue)
                    sheet.FindCellByName("B5").SetFillColor(System.Drawing.Color.Pink)
            
                    ' set cell formula
                    Dim cellD16 As Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell = sheet.FindCellByName("D8")
                    cellD16.Formula = "SUM(B8,C8)"
                    cellD16.Number = sheet.FindCellByName("B8").Number + sheet.FindCellByName("C8").Number
            
                    ' find cell that contains text "[cell_name]"
                    Dim cell As Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell = sheet.FindCell("[cell_name]")
                    ' set cell text to cell name in A1 format
                    cell.Text = cell.Name
            
                    ' save changed document to a XLSX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void XlsxCellExample()
            {
                string templateFilename = "XlsxCell_template.xlsx";
                string outFilename = "XlsxCell.xlsx";
                string outPdfFilename = "XlsxCell.pdf";
            
                // create XlsxDocumentEditor that allows to edit file "SetBarcodeImage_template.xlsx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename))
                {
                    // get first sheet in XLSX document
                    Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet sheet = editor.Sheets[0];
            
                    // find cell by reference (A1 format) and set cell fill color
                    sheet.FindCellByName("B3").SetFillColor(System.Drawing.Color.Red);
                    sheet.FindCellByName("D3").SetFillColor(System.Drawing.Color.Yellow);
                    sheet.FindCellByName("C4").SetFillColor(System.Drawing.Color.Green);
                    sheet.FindCellByName("D5").SetFillColor(System.Drawing.Color.Blue);
                    sheet.FindCellByName("B5").SetFillColor(System.Drawing.Color.Pink);
            
                    // set cell formula
                    Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell cellD16 = sheet.FindCellByName("D8");
                    cellD16.Formula = "SUM(B8,C8)";
                    cellD16.Number = sheet.FindCellByName("B8").Number + sheet.FindCellByName("C8").Number;
            
                    // find cell that contains text "[cell_name]"
                    Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell cell = sheet.FindCell("[cell_name]");
                    // set cell text to cell name in A1 format
                    cell.Text = cell.Name;
            
                    // save changed document to a XLSX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Sheet">
            <summary>
            Gets the sheet, which is associated with this cell.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Name">
            <summary>
            Gets the cell name (refernece) in A1 format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.ColumnNumber">
            <summary>
            Gets the column number of this cell.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.RowNumber">
            <summary>
            Gets the row number of this cell.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Text">
            <summary>
            Gets or sets text, which is stored in this cell.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Number" />
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Formula" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Number">
            <summary>
            Gets or sets a number, which is stored in this cell.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Formula">
            <summary>
            Gets or sets the formula, which is used to calculate value of this cell.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.StyleIndex">
            <summary>
            Gets or sets a style index of this cell.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Remove">
            <summary>
            Removes content of this cell.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.FindTextNext(System.Int32@,System.String)">
            <summary>
            Finds specified text at specified index.
            </summary>
            <param name="startIndex">The start index</param>
            <param name="text">The text to search.</param>
            <returns>
            A new instance of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextContent" /> class.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.SetTextProperties(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlTextProperties)">
            <summary>
            Sets the text properties.
            </summary>
            <param name="textProperties">The text properties.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.SetFillColor(System.Nullable{System.Drawing.Color})">
            <summary>
            Sets the fill color of this element.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.SetBorder(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableCell,Vintasoft.Imaging.Office.BorderSide)">
            <summary>
            Set cell borders from specified table cell.
            </summary>
            <param name="borderSource">The table cell from which border style must be copied.</param>
            <param name="borderSide">The border side.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Clone">
            <summary>
            Clones this element.
            </summary>
            <returns>Copy of this element.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet">
            <summary>
            Represents the worksheet of XLSX document.
            </summary>
            <example> 
            This example shows how to fill data table 
            (example uses template document <a href="content/Edit_Xlsx_Content/CopyTableRow_template.xlsx">CopyTableRow_template.xlsx</a>):
            <code lang="VB.NET">
            Public Shared Sub XlsxCopyTableRowExample()
                Dim templateFilename As String = "CopyTableRow_template.xlsx"
                Dim outFilename As String = "CopyTableRow.xlsx"
                Dim outPdfFilename As String = "CopyTableRow.pdf"
            
                ' create XlsxDocumentEditor that allows to edit file "CopyTableRow_template.xlsx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename)
                    ' get first sheet in XLSX document
                    Dim sheet As Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet = editor.Sheets(0)
            
                    ' find  row that contains text "[cell1]"
                    Dim templateRow As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow = sheet.FindRow("[cell1]")
            
                    ' create an array that contains colors
                    Dim colors As System.Drawing.Color() = New System.Drawing.Color() {System.Drawing.Color.Red, System.Drawing.Color.Green, System.Drawing.Color.Blue, System.Drawing.Color.Orange, System.Drawing.Color.Yellow}
                    ' for each color
                    For i As Integer = 0 To colors.Length - 1
                        ' insert copy of template row before template row
                        Dim rowCopy As Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow = DirectCast(templateRow.InsertCopyBeforeSelf(), Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)
            
                        ' set row data
                        rowCopy(0).Text = String.Format("Copy {0} ({1})", i, colors(i))
                        rowCopy("[cell1]") = String.Format("cell data {0}", i)
            
                        ' set cell colors
                        rowCopy(1).SetFillColor(colors(i))
                        rowCopy(2).SetFillColor(colors(i))
            
                        ' if color has odd index in colors array
                        If i Mod 2 = 1 Then
                            ' set row height to 10mm
                            rowCopy.Height = Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPoints(10, Vintasoft.Imaging.UnitOfMeasure.Millimeters)
                        End If
                    Next
            
                    ' remove template row
                    templateRow.Remove()
            
                    ' save changed document to a XLSX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void XlsxCopyTableRowExample()
            {
                string templateFilename = "CopyTableRow_template.xlsx";
                string outFilename = "CopyTableRow.xlsx";
                string outPdfFilename = "CopyTableRow.pdf";
            
                // create XlsxDocumentEditor that allows to edit file "CopyTableRow_template.xlsx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename))
                {
                    // get first sheet in XLSX document
                    Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet sheet = editor.Sheets[0];
            
                    // find  row that contains text "[cell1]"
                    Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow templateRow = sheet.FindRow("[cell1]");
            
                    // create an array that contains colors
                    System.Drawing.Color[] colors = new System.Drawing.Color[] {
                        System.Drawing.Color.Red,
                        System.Drawing.Color.Green,
                        System.Drawing.Color.Blue,
                        System.Drawing.Color.Orange,
                        System.Drawing.Color.Yellow
                    };
                    // for each color
                    for (int i = 0; i &lt; colors.Length; i++)
                    {
                        // insert copy of template row before template row
                        Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow rowCopy = 
                            (Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)templateRow.InsertCopyBeforeSelf();
            
                        // set row data
                        rowCopy[0].Text = string.Format("Copy {0} ({1})", i, colors[i]);
                        rowCopy["[cell1]"] = string.Format("cell data {0}", i);
            
                        // set cell colors
                        rowCopy[1].SetFillColor(colors[i]);
                        rowCopy[2].SetFillColor(colors[i]);
            
                        // if color has odd index in colors array
                        if (i % 2 == 1)
                        {
                            // set row height to 10mm
                            rowCopy.Height = Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPoints(10, Vintasoft.Imaging.UnitOfMeasure.Millimeters);
                        }
                    }
            
                    // remove template row
                    templateRow.Remove();
            
                    // save changed document to a XLSX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.Name">
            <summary>
            Gets or sets the name of the sheet.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.Images">
            <summary>
            Gets all images, which are contained in this document.
            </summary>
            <returns>An array that contains all images, which are contained in this document.</returns>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.FindImages(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.FindImages(Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentTableRow)">
            <summary>
            Finds images, which are intersected with specified row.
            </summary>
            <param name="row">The row.</param>
            <returns>An array of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Editor.OpenXmlDocumentImage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.FindRow(System.String)">
            <summary>
            Finds the first table row that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The table row that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.FindCellByName(System.String)">
            <summary>
            Finds the table cell by name (reference) in A1 format.
            </summary>
            <param name="name">The cell name (reference) in A1 format (for example, "B12").</param>
            <returns>The table cell with specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> format is not recognized.</exception>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell.Name" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.FindCell(System.Int32,System.Int32)">
            <summary>
            Finds the table cell at specified location in sheet.
            </summary>
            <param name="columnNumber">The column number.</param>
            <param name="rowNumber">The row number.</param>
            <returns>The tabel cell.</returns>
            <example> 
            This example shows how to set barcode image in XLSX document 
            (example uses template document <a href="content/Edit_Xlsx_Content/SetBarcodeImage_template.xlsx">SetBarcodeImage_template.xlsx</a>):
            <code lang="VB.NET">
            Public Shared Sub XlsxSetBarcodeImageExample()
                Dim templateFilename As String = "SetBarcodeImage_template.xlsx"
                Dim outFilename As String = "SetBarcodeImage.xlsx"
                Dim outPdfFilename As String = "SetBarcodeImage.pdf"
            
                ' create XlsxDocumentEditor that allows to edit file "SetBarcodeImage_template.xlsx"
                Using editor As New Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename)
                    ' get first sheet in XLSX document
                    Dim sheet As Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet = editor.Sheets(0)
            
                    ' find cell with text "Invoice number:" 
                    Dim cell As Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell = sheet.FindCell("Invoice number:")
            
                    ' get barcode value as text of next row after "Invoice number:" cell
                    Dim barcodeValue As String = sheet.FindCell(cell.ColumnNumber, cell.RowNumber + 1).Text
            
                    ' create and setup barcode generator
                    Dim barcodeGenerator As New Vintasoft.Barcode.BarcodeWriter()
                    barcodeGenerator.Settings.Barcode = Vintasoft.Barcode.BarcodeType.QR
                    barcodeGenerator.Settings.SetWidth(200)
                    barcodeGenerator.Settings.Value = barcodeValue
            
                    ' generate barcode image
                    Using barcodeImage As New Vintasoft.Imaging.VintasoftImage(barcodeGenerator.GetBarcodeAsVintasoftBitmap(), True)
                        ' crop barcode to the rectangular image
                        barcodeImage.Crop(New System.Drawing.Rectangle(0, 0, barcodeImage.Width, barcodeImage.Width))
            
                        ' set barcode image to the DOCX image at index 0
                        editor.Images(0).SetImage(barcodeImage)
                    End Using
            
                    ' save changed document to a XLSX file
                    editor.Save(outFilename)
            
                    ' export changed document to a PDF document
                    editor.Export(outPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void XlsxSetBarcodeImageExample()
            {
                string templateFilename = "SetBarcodeImage_template.xlsx";
                string outFilename = "SetBarcodeImage.xlsx";
                string outPdfFilename = "SetBarcodeImage.pdf";
            
                // create XlsxDocumentEditor that allows to edit file "SetBarcodeImage_template.xlsx"
                using (Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor editor =
                    new Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentEditor(templateFilename))
                {
                    // get first sheet in XLSX document
                    Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet sheet = editor.Sheets[0];
            
                    // find cell with text "Invoice number:" 
                    Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetCell cell = sheet.FindCell("Invoice number:");
            
                    // get barcode value as text of next row after "Invoice number:" cell
                    string barcodeValue = sheet.FindCell(cell.ColumnNumber, cell.RowNumber + 1).Text;
            
                    // create and setup barcode generator
                    Vintasoft.Barcode.BarcodeWriter barcodeGenerator = new Vintasoft.Barcode.BarcodeWriter();
                    barcodeGenerator.Settings.Barcode = Vintasoft.Barcode.BarcodeType.QR;
                    barcodeGenerator.Settings.SetWidth(200);
                    barcodeGenerator.Settings.Value = barcodeValue;
            
                    // generate barcode image
                    using (Vintasoft.Imaging.VintasoftImage barcodeImage =
                        new Vintasoft.Imaging.VintasoftImage(barcodeGenerator.GetBarcodeAsVintasoftBitmap(), true))
                    {
                        // crop barcode to the rectangular image
                        barcodeImage.Crop(new System.Drawing.Rectangle(0, 0, barcodeImage.Width, barcodeImage.Width));
            
                        // set barcode image to the DOCX image at index 0
                        editor.Images[0].SetImage(barcodeImage);
                    }
            
                    // save changed document to a XLSX file
                    editor.Save(outFilename);
            
                    // export changed document to a PDF document
                    editor.Export(outPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.FindCell(System.String)">
            <summary>
            Finds the first table cell that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The table cell that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheet.Remove">
            <summary>
            This method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetRow">
            <summary>
            Represents the row of XLSX worksheet.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetRow.RowNumber">
            <summary>
            Gets the number of the row.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetRow.Height">
            <summary>
            Gets or sets the row height, in Points (1/72 inch).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetRow.FindCell(System.String)">
            <summary>
            Finds the first table cell that contains specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The cell that contains specified text.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Editor.XlsxDocumentSheetRow.Clone">
            <summary>
            Clones this element.
            </summary>
            <returns>Cloned element.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentConverter">
            <summary>
            Contains conversion functions from/to Open XML documents.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentConverter.ConvertDocToDocx(System.String,System.String)">
            <summary> 
            Converts the DOC document to DOCX document.
            </summary>
            <param name="docFilename">The filename of input DOC document.</param>
            <param name="docxFilename">The filename of output DOCX document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentConverter.ConvertDocToDocx(System.IO.Stream,System.IO.Stream)">
            <summary>
            Converts the DOC document to DOCX document.
            </summary>
            <param name="inputStream">The input stream that contains DOC document.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentConverter.ConvertXlsToXlsx(System.String,System.String)">
            <summary> 
            Converts the XLS document to XLSX document.
            </summary>
            <param name="xlsFilename">The filename of input XLS document.</param>
            <param name="xlsxFilename">The filename of output XLSX document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentConverter.ConvertXlsToXlsx(System.IO.Stream,System.IO.Stream)">
            <summary>
            Converts the XLS document to XLSX document.
            </summary>
            <param name="inputStream">The input stream that contains XLS document.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPage">
            <summary>
            Represents a XLSX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPage" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPage" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPageCollection">
            <summary>
            Represents a collection of <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPage" /> objects.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPageCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPageCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPageCollection" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument">
            <summary>
            Represents a XLSX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument" /> class.
            </summary>
            <param name="stream">A stream, which contains the XLSX file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument.#ctor(System.IO.Stream,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument" /> class.
            </summary>
            <param name="stream">A stream, which contains the XLSX file.</param>
            <param name="documentLayoutSettings">The XLSX document layout settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument" /> class.
            </summary>
            <param name="filename">The name of the XLSX file.</param>
            <param name="mode">A FileMode constant that determines how to open or create the XLSX file.</param>
            <param name="access">A FileAccess constant that determines how the XLSX file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>mode</i> or <i>access</i> is not supported.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument" /> class.
            </summary>
            <param name="filename">The name of the XLSX file.</param>
            <param name="mode">A FileMode constant that determines how to open or create the XLSX file.</param>
            <param name="access">A FileAccess constant that determines how the XLSX file can be accessed.</param>
            <param name="documentLayoutSettings">The XLSX document layout settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>mode</i> or <i>access</i> is not supported.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument.Pages">
            <summary>
            Gets the page collection of XLSX file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument.DocumentInformation">
            <summary>
            Gets information (author, modification date, etc)
            about this XLSX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocumentException">
            <summary>
            Represents error that occurs during manipulation with XLSX document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocumentException" />
            class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocumentException" />
            class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no
            inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument">
            <summary>
            Represents an OpenXml document.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument" />
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.#ctor(Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Prevents a default instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument" /> class from being created.
            </summary>
            <param name="documentLayoutSettings">The document layout settings.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.RuntimeMessages">
            <summary>
            Gets a collection of runtime messages, which occured during loading of this OpenXml document or
            rendering of OpenXml pages in current thread.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.GetAllRuntimeMessages" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.AddRuntimeMessage(Vintasoft.Imaging.Office.RuntimeMessage)" />
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.ClearRuntimeMessages" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.DocumentInformation">
            <summary>
            Gets information (author, modification date, etc) about this OpenXml document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.FontProgramsController">
            <summary>
            Gets the font programs controller that 
            allows to access external font programs.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings.FontProgramsController" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.IsEditable">
            <summary>
            Gets a value indicating whether this DocxDocument is editable.
            </summary>
            <value>
            <b>True</b> if this DocxDocument is editable; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.GetAvailableFontNames">
            <summary>
            Returns available font names for this document.
            </summary>
            <returns>An array with available font names for this document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.SetIsEditable">
            <summary>
            Sets <see cref="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.IsEditable" /> to <b>true</b>.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.Layout(Vintasoft.Imaging.Codecs.Decoders.DocumentLayoutSettings)">
            <summary>
            Layouts this document using the specified layout settings.
            </summary>
            <param name="layoutSettings">The layout settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.GetAllRuntimeMessages">
            <summary>
            Returns an array with runtime messages, which occured during loading of this OpenXml document or rendering of OpenXml pages in any thread.
            </summary>
            <returns>An array with runtime messages, which occured during loading of this OpenXml document or rendering of OpenXml pages in any thread.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.AddRuntimeMessage(Vintasoft.Imaging.Office.RuntimeMessage)">
            <summary>
            Adds the runtime message to the <see cref="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.RuntimeMessages" /> property.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.ClearRuntimeMessages">
            <summary>
            Clears the list of runtime messages.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.RuntimeMessages" />
        </member>
        <member name="E:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.RuntimeMessageAdded">
            <summary>
            Occurs when the runtime message is added to the <see cref="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.RuntimeMessages" /> property.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocument.AddRuntimeMessage(Vintasoft.Imaging.Office.RuntimeMessage)" />
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage">
            <summary>
            Represents an OpenXml page.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPage" />
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPage" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.Render">
            <summary>
            Returns the rendered image of the page.
            </summary>
            <returns>Rendered image of the page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.Render(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns the rendered image of the page.
            </summary>
            <param name="renderingSettings">The rendering settings.</param>
            <returns>Rendered image of the page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.Render(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns the rendered image of the page.
            </summary>
            <param name="decodingSettings">The decoding settings.</param>
            <param name="renderingSettings">The rendering settings.</param>
            <returns>Rendered image of the page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.Render(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns the rendered image of the page.
            </summary>
            <param name="decodingSettings">The decoding settings.</param>
            <param name="renderingSettings">The rendering settings.</param>
            <param name="renderingProgress">An image rendering progress delegate.</param>
            <returns>Rendered image of the page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.Render(System.Drawing.RectangleF,System.Single,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns the rendered image of the page.
            </summary>
            <param name="rect">Rectangle on this page in pixels.</param>
            <param name="scale">Scale factor.</param>
            <param name="decodingSettings">The decoding settings.</param>
            <param name="renderingSettings">The rendering settings.</param>
            <param name="renderingProgress">An image rendering progress delegate.</param>
            <returns>Rendered image of the page.</returns>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>renderingSettings</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.GetPageSizeInPixels(Vintasoft.Imaging.Resolution)">
            <summary>
            Returns the page size in pixels.
            </summary>
            <param name="resolution">The resolution.</param>
            <returns>
            The page size in pixels.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2">
            <summary>
            Represents a collection of <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPage" /> objects.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxPageCollection" />
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxPageCollection" />
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2" /> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.Item(System.Int32)">
            <summary>
            Gets the page at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to get or set.</param>
            <returns>The page at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero <b>-or-</b>
            <i>index</i> is equal to or greater than <see cref="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.Count" />.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.Count">
            <summary>
            Gets the number of pages contained in the <see cref="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="page">The object to locate in the collection.</param>
            <returns>
            The index of <i>item</i> if found in the list; otherwise, -1.
            </returns>
            <remarks>
            If an object occurs multiple times in the list, the IndexOf method
            always returns the first instance found.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific page.
            </summary>
            <param name="page">The page to locate in the collection.</param>
            <returns><b>true</b> if page is found in the collection;
            otherwise; <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.ToArray">
            <summary>
            Returns this page collection as array.
            </summary>
            <returns>This page collection as array.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Office.OpenXml.OpenXmlPageCollection`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation">
            <summary>
            Provides information about OpenXml document.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Docx.DocxDocument" />
            <seealso cref="T:Vintasoft.Imaging.Office.OpenXml.Xlsx.XlsxDocument" />
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Revision">
            <summary>
            Gets the category of the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Language">
            <summary>
            Gets the language of the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.ContentType">
            <summary>
            Gets the type of content that is contained in the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Identifier">
            <summary>
            Gets the unambiguously identifies of the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Category">
            <summary>
            Gets the category of the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Modified">
            <summary>
            Gets the date and time the document was last changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Created">
            <summary>
            Gets the date and time the document was created.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.LastPrinted">
            <summary>
            Gets the date and time the document content was last printed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.ContentStatus">
            <summary>
            Gets a value that represents the status of the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.LastModifiedBy">
            <summary>
            Gets a value that identifies the user who last modified the document content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Description">
            <summary>
            Gets a description of the content contained in the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Keywords">
            <summary>
            Gets a value that define a delimited set of keywords to
            support searching and indexing the document and its content
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Creator">
            <summary>
            Gets a value that identifies the individual or entity 
            that created the document and its content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Subject">
            <summary>
            Gets the topic of the document content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Title">
            <summary>
            Gets the name given to the document and its content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Office.OpenXml.OpenXmlDocumentInformation.Version">
            <summary>
            Gets the version number of the document.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.BorderSide">
            <summary>
            Specifies available border sides.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.Vertical">
            <summary>
            The vertical borders (left and right).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.Horizontal">
            <summary>
            The horizontal borders (top and bottom).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Office.BorderSide.All">
            <summary>
            All borders.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.RuntimeError">
            <summary>
            Represents the runtime error, which occurs during loading of document or rendering of page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.RuntimeError.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.RuntimeError" /> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Office.RuntimeError.StackTrace">
            <summary>
            Returns a stack trace, which is an ordered collection of one or more stack frames.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.RuntimeError.ToString">
            <summary>
            Builds a readable representation of the stack trace.
            </summary>
            <returns>A readable representation of the stack trace.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Office.RuntimeMessage">
            <summary>
            Represents the runtime message, which occurs during loading of document or rendering of page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Office.RuntimeMessage.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.RuntimeMessage" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.RuntimeMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Office.RuntimeMessage" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Office.RuntimeMessage.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Office.RuntimeWarning">
            <summary>
            Represents the runtime warning, which occurs during loading of document or rendering of page.
            </summary>
            <remarks>
            Warning is not a critical error and may be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Office.RuntimeWarning.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Office.RuntimeWarning" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        </members>
</doc>
